namespace CnCalendar
{
    using System;
    using System.Globalization;

    public static class MyCalendar
    {
        private static string[] cShuXiang = new string[] { "鼠", "牛", "虎", "兔", "龙", "蛇", "马", "羊", "猴", "鸡", "狗", "猪" };
        private static string[] g_ganZhi2 = new string[] { 
            "甲子", "乙丑", "丙寅", "丁卯", "戊辰", "己巳", "庚午", "辛未", "壬申", "癸酉", "甲戌", "乙亥", "丙子", "丁丑", "戊寅", "己卯", 
            "庚辰", "辛巳", "壬午", "癸未", "甲申", "乙酉", "丙戌", "丁亥", "戊子", "己丑", "庚寅", "辛卯", "壬辰", "癸巳", "甲午", "乙未", 
            "丙申", "丁酉", "戊戌", "己亥", "庚子", "辛丑", "壬寅", "癸卯", "甲辰", "乙巳", "丙午", "丁未", "戊申", "己酉", "庚戌", "辛亥", 
            "壬子", "癸丑", "甲寅", "乙卯", "丙辰", "丁巳", "戊午", "己未", "庚申", "辛酉", "壬戌", "癸亥"
         };
        

        private static char[] g_leapMonth2 = new char[] { 
            '0', 'c', '0', '0', '8', '0', '0', '5', '0', '0', '1', '0', 'a', '0', '0', '7', 
            '0', '0', '3', '0', 'c', '0', '0', '8', '0', '0', '5', '0', '0', '1', '0', 'a', 
            '0', '0', '7', '0', '0', '3', '0', 'c', '0', '0', '8', '0', '0', '5', '0', '0', 
            '2', '0', 'a', '0', '0', '7', '0', '0', '3', '0', 'c', '0', '0', '8', '0', '0', 
            '5', '0', '0', '2', '0', 'a', '0', '0', '7', '0', '0', '3', '0', 'c', '0', '0', 
            '9', '0', '0', '5', '0', '0', '2', '0', 'a', '0', '0', '7', '0', '0', '3', '0', 
            'c', '0', '0', '9', '0', '0', '5', '0', '0', '2', '0', 'a', '0', '0', '6', '0', 
            '0', '3', '0', 'c', '0', '0', '6', '0', '0', '3', '0', 'c', '0', '0', '9', '0', 
            '0', '6', '0', '0', 'c', '0', 'c', '0', '0', '6', '0', 'c', '0', '0', 'c', '0', 
            '0', 'c', '0', '0', 'c', '0', 'c', '0', '0', '0', '6', '0', '0', 'c', '0', 'c', 
            '0', '0', '0', '6', '0', '9', '0', '3', '0', '3', '0', '3', '0', '0', '0', '6', 
            '0', '0', '0', 'c', '0', '0', 'c', '0', '6', '0', 'c', '0', '0', '0', '6', 'c', 
            '0', '0', '0', '0', '0', 'c', '0', 'c', '0', 'c', '0', '0', '6', '0', '0', '0', 
            '3', '0', '3', '0', '0', '0', '6', 'c', '0', '0', '0', '0', '9', '0', '0', '9', 
            'c', '0', '0', '9', '0', 'c', '0', '0', 'c', '0', '0', '9', '0', '0', '0', '3', 
            '0', '0', '0', '3', '0', '9', '0', '6', '0', '3', '0', '0', '3', '0', 'c', '0', 
            'c', '0', '0', '0', '6', '0', 'c', '0', '0', '0', '9', '0', 'c', '0', '0', '6', 
            '0', '6', '0', '0', 'c', '0', '0', '3', '0', '0', '6', '0', 'c', '0', '0', 'c', 
            '0', '0', '3', '0', '0', '6', '0', '0', '9', '0', '6', '0', '0', '3', '0', 'c', 
            '0', '0', '6', '0', '0', '6', '0', 'c', '0', '0', '9', '0', '9', '0', '0', 'c', 
            '0', '0', '0', '9', '0', 'c', '0', '0', '9', '0', 'c', '0', '0', 'c', '0', '0', 
            '6', '0', '3', '0', '0', '0', '6', '0', '6', '0', '0', '0', '3', '0', '3', '0', 
            'c', '0', 'c', '0', '0', '0', '3', '0', 'c', '0', '0', '6', '0', '0', '3', '0', 
            'c', '0', '0', '9', '0', '0', '6', '0', '0', '3', '0', 'c', '0', '0', '9', '0', 
            '3', '0', '0', 'c', '0', '0', '8', '0', '0', '5', '0', '0', '2', '0', 'a', '0', 
            '0', '6', '0', '0', '3', '0', 'c', '0', '0', '8', '0', '0', '5', '0', '0', '2', 
            '0', 'b', '0', '0', '7', '0', '0', '3', '0', 'c', '0', '0', '9', '0', '0', '5', 
            '0', '0', '1', '0', 'a', '0', '0', '7', '0', '0', '3', '0', 'b', '0', '0', '9', 
            '0', '0', '6', '0', '0', '2', '0', 'a', '0', '0', '7', '0', '0', '4', '0', 'c', 
            '0', '0', '8', '0', '0', '5', '0', '0', '2', '0', 'a', '0', '0', '6', '0', '0', 
            '3', '0', 'c', '0', '0', '8', '0', '0', '5', '0', '0', '2', '0', 'b', '0', '0', 
            '7', '0', '0', '3', '0', 'c', '0', '0', '9', '0', '0', '5', '0', '0', '1', '0', 
            'a', '0', '0', '7', '0', '0', '3', '0', 'b', '0', '0', '9', '0', '0', '6', '0', 
            '0', '2', '0', 'a', '0', '0', '7', '0', '0', '4', '0', 'c', '0', '0', '8', '0', 
            '0', '5', '0', '0', '2', '0', 'a', '0', '0', '6', '0', '0', '3', '0', 'c', '0', 
            '0', '8', '0', '0', '5', '0', '0', '2', '0', 'b', '0', '0', '7', '0', '0', '3', 
            '0', 'c', '0', '0', '9', '0', '0', '5', '0', '0', '0', '0', 'c', '0', '0', '9', 
            '0', '0', '9', '0', '9', '0', '0', '9', '0', '0', '9', '0', '9', '0', '0', '9', 
            '0', '0', '9', '0', '0', '9', '0', '9', '0', '0', '9', '0', '0', '9', '0', '9', 
            '0', '0', '9', '0', '0', '9', '0', '0', '9', '0', '9', '0', '0', '9', '0', '0', 
            '9', '0', '9', '0', '0', '9', '0', '0', '9', '0', '0', '9', '0', '9', '0', '0', 
            '9', '0', '0', '9', '0', '9', '0', '0', '9', '0', '0', '9', '0', '0', '9', '0', 
            '9', '0', '0', '9', '0', '0', '9', '0', '9', '0', '0', '9', '0', '0', '9', '0', 
            '9', '0', '0', '9', '0', '0', '9', '0', '0', '9', '0', '9', '0', '0', '9', '0', 
            '0', '9', '0', '9', '0', '0', '9', '0', '0', '9', '0', '0', '9', '0', '9', '0', 
            '0', '9', '0', '0', '9', '0', '9', '0', '0', '9', '0', '0', '9', '0', '0', '9', 
            '0', '9', '0', '0', '9', '0', '0', '9', '0', '9', '0', '0', '6', '0', '0', '3', 
            '0', 'c', '0', '0', '9', '0', '0', '5', '0', '0', '1', '0', 'a', '0', '0', '7', 
            '0', '0', '3', '0', 'b', '0', '0', '8', '0', '0', '5', '0', '0', '1', '0', '9', 
            '0', '0', '7', '0', '0', '4', '0', 'c', '0', '0', '8', '0', '0', '5', '0', '0', 
            '2', '0', 'a', '0', '0', '6', '0', '0', '3', '0', 'c', '0', '0', '9', '0', '0', 
            '4', '0', '0', '1', '0', 'a', '0', '0', '6', '0', '0', '3', '0', 'c', '0', '0', 
            '9', '0', '0', '5', '0', '0', '1', '0', 'a', '0', '0', '7', '0', '0', '3', '0', 
            'b', '0', '0', '8', '0', '0', '5', '0', '0', '1', '0', 'a', '0', '0', '8', '0', 
            '0', '5', '0', '0', '1', '0', '9', '0', '0', '5', '0', '0', '2', '0', 'a', '0', 
            '0', '6', '0', '0', '3', '0', 'c', '0', '0', '8', '0', '0', '4', '0', '0', '1', 
            '0', 'a', '0', '0', '6', '0', '0', '3', '0', 'c', '0', '0', '9', '0', '0', '5', 
            '0', '0', '1', '0', 'a', '0', '0', '7', '0', '0', '3', '0', 'b', '0', '0', '8', 
            '0', '0', '5', '0', '0', '1', '0', 'a', '0', '0', '7', '0', '0', '3', '0', 'b', 
            '0', '0', '8', '0', '0', '5', '0', '0', '1', '0', '9', '0', '0', '7', '0', '0', 
            '4', '0', 'c', '0', '0', '8', '0', '0', '5', '0', '0', '2', '0', 'a', '0', '0', 
            '6', '0', '0', '3', '0', 'c', '0', '0', '8', '0', '0', '4', '0', '0', '1', '0', 
            'a', '0', '0', '6', '0', '0', '3', '0', 'c', '0', '0', '9', '0', '0', '5', '0', 
            '0', '1', '0', 'a', '0', '0', '7', '0', '0', '3', '0', 'b', '0', '0', '8', '0', 
            '0', '5', '0', '0', '1', '0', '9', '0', '0', '7', '0', '0', '4', '0', 'c', '0', 
            '0', '8', '0', '0', '5', '0', '0', '2', '0', 'a', '0', '0', '6', '0', '0', '3', 
            '0', 'c', '0', '0', '8', '0', '0', '4', '0', '0', '1', '0', 'a', '0', '0', '6', 
            '0', '0', '3', '0', 'c', '0', '0', '9', '0', '0', '5', '0', '0', '1', '0', 'a', 
            '0', '0', '6', '0', '0', '3', '0', 'c', '0', '0', '9', '0', '0', '5', '0', '0', 
            '1', '0', 'a', '0', '0', '7', '0', '0', '3', '0', 'b', '0', '0', '8', '0', '0', 
            '5', '0', '0', '1', '0', '9', '0', '0', '7', '0', '0', '4', '0', 'c', '0', '0', 
            '8', '0', '0', '5', '0', '0', '2', '0', 'a', '0', '0', '6', '0', '0', '3', '0', 
            'c', '0', '0', '8', '0', '0', '4', '0', '0', '1', '0', 'a', '0', '0', '7', '0', 
            '0', '3', '0', 'b', '0', '0', '8', '0', '0', '5', '0', '0', '1', '0', 'a', '0', 
            '0', '7', '0', '0', '4', '0', 'c', '0', '0', '8', '0', '0', '5', '0', '0', '2', 
            '0', 'a', '0', '0', '6', '0', '0', '3', '0', 'c', '0', '0', '8', '0', '0', '4', 
            '0', '0', '1', '0', 'a', '0', '0', '7', '0', '0', '3', '0', 'c', '0', '0', '9', 
            '0', '0', '5', '0', '0', '1', '0', 'a', '0', '0', '7', '0', '0', '3', '0', 'b', 
            '0', '0', '8', '0', '0', '5', '0', '0', '2', '0', 'a', '0', '0', '6', '0', '0', 
            '3', '0', 'c', '0', '0', '8', '0', '0', '4', '0', '0', '1', '0', 'a', '0', '0', 
            '6', '0', '0', '3', '0', 'c', '0', '0', '9', '0', '0', '5', '0', '0', '5', '0', 
            '0', '2', '0', 'a', '0', '0', '6', '0', '0', '3', '0', 'c', '0', '0', '9', '0', 
            '0', '5', '0', '0', '1', '0', 'b', '0', '0', '7', '0', '0', '3', '0', 'c', '0', 
            '0', '9', '0', '0', '5', '0', '0', '1', '0', 'a', '0', '0', '7', '0', '0', '4', 
            '0', 'c', '0', '0', '8', '0', '0', '4', '0', '0', '2', '0', 'a', '0', '0', '6', 
            '0', '0', '3', '0', 'c', '0', '0', '8', '0', '0', '5', '0', '0', '2', '0', 'a', 
            '0', '0', '6', '0', '0', '3', '0', 'c', '0', '0', '9', '0', '0', '5', '0', '0', 
            '1', '0', 'a', '0', '0', '7', '0', '0', '3', '0', 'b', '0', '0', '8', '0', '0', 
            '4', '0', '0', '2', '0', 'a', '0', '0', '6', '0', '0', '4', '0', 'c', '0', '0', 
            '9', '0', '0', '5', '0', '0', '2', '0', 'b', '0', '0', '7', '0', '0', '3', '0', 
            'c', '0', '0', 'a', '0', '0', '5', '0', '0', '1', '0', 'a', '0', '0', '7', '0', 
            '0', '3', '0', 'b', '0', '0', '9', '0', '0', '5', '0', '0', '2', '0', 'a', '0', 
            '0', '7', '0', '0', '3', '0', 'c', '0', '0', '8', '0', '0', '4', '0', '0', '2', 
            '0', 'a', '0', '0', '6', '0', '0', '3', '0', 'c', '0', '0', '9', '0', '0', '5', 
            '0', '0', '1', '0', 'a', '0', '0', '7', '0', '0', '3', '0', 'c', '0', '0', '9', 
            '0', '0', '5', '0', '0', '3', '0', 'b', '0', '0', '7', '0', '0', '5', '0', '0', 
            '1', '0', '9', '0', '0', '5', '0', '0', '2', '0', 'a', '0', '0', '7', '0', '0', 
            '4', '0', '0', '1', '0', '9', '0', '0', '6', '0', '0', '2', '0', 'c', '0', '0', 
            '7', '0', '0', '5', '0', 'c', '0', '0', '9', '0', '0', '6', '0', '0', '3', '0', 
            'b', '0', '0', '8', '0', '0', '4', '0', '0', '2', '0', 'a', '0', '0', '6', '0', 
            '0', '3', '0', 'b', '0', '0', '8', '0', '0', '4', '0', '0', '1', '0', 'a', '0', 
            '0', '6', '0', '0', '3', '0', 'b', '0', '0', '8', '0', '0', '5', '0', '0', '1', 
            '0', 'a', '0', '0', '5', '0', '0', '4', '0', 'c', '0', '0', '8', '0', '0', '5', 
            '0', '0', '1', '0', 'a', '0', '0', '6', '0', '0', '3', '0', 'c', '0', '0', '8', 
            '0', '0', '5', '0', '0', '1', '0', 'b', '0', '0', '7', '0', '0', '3', '0', 'c', 
            '0', '0', '7', '0', '0', '5', '0', '0', '1', '0', '9', '0', '0', '7', '0', '0', 
            '3', '0', 'b', '0', '0', '7', '0', '0', '4', '0', '0', '2', '0', 'a', '0', '0', 
            '6', '0', '0', '3', '0', 'c', '0', '0', '8', '0', '0', '4', '0', '0', '2', '0', 
            'a', '0', '0', '7', '0', '0', '3', '0', 'b', '0', '0', '9', '0', '0', '5', '0', 
            '0', '1', '0', 'a', '0', '0', '6', '0', '0', '4', '0', 'c', '0', '0', '8', '0', 
            '0', '5', '0', '0', '2', '0', 'a', '0', '0', '6', '0', '0', '4', '0', 'c', '0', 
            '0', '8', '0', '0', '5', '0', '0', '1', '0', 'b', '0', '0', '7', '0', '0', '3', 
            '0', 'c', '0', '0', '7', '0', '0', '5', '0', '0', '1', '0', '9', '0', '0', '7', 
            '0', '0', '3', '0', 'c', '0', '0', '8', '0', '0', '5', '0', '0', '2', '0', 'a', 
            '0', '0', '7', '0', '0', '3', '0', 'c', '0', '0', '9', '0', '0', '5', '0', '0', 
            '2', '0', 'a', '0', '0', '7', '0', '0', '3', '0', 'c', '0', '0', '9', '0', '0', 
            '5', '0', '0', '2', '0', 'a', '0', '0', '6', '0', '0', '4', '0', 'c', '0', '0', 
            '9', '0', '0', '5', '0', '0', '2', '0', 'a', '0', '0', '6', '0', '0', '4', '0', 
            'c', '0', '0', '9', '0', '0', '5', '0', '0', '1', '0', 'b', '0', '0', '7', '0', 
            '0', '3', '0', 'c', '0', '0', '8', '0', '0', '5', '0', '0', '3', '0', 'b', '0', 
            '0', '7', '0', '0', '4', '0', '0', '1', '0', '9', '0', '0', '6', '0', '0', '2', 
            '0', 'c', '0', '0', '8', '0', '0', '4', '0', '0', '2', '0', '9', '0', '0', '6', 
            '0', '0', '2', '0', 'a', '0', '0', '8', '0', '0', '4', '0', '0', '1', '0', '9', 
            '0', '0', '5', '0', '0', '3', '0', 'b', '0', '0', '8', '0', '0', '4', '0', '0', 
            '2', '0', 'a', '0', '0', '6', '0', '0', '4', '0', 'b', '0', '0', '8', '0', '0', 
            '4', '0', 'c', '0', '0', 'a', '0', '0', '6', '0', '0', '2', '0', 'b', '0', '0', 
            '7', '0', '0', '5', '0', '0', '1', '0', '9', '0', '0', '6', '0', '0', '3', '0', 
            'b', '0', '0', '7', '0', '0', '5', '0', '0', '2', '0', 'a', '0', '0', '6', '0', 
            '0', '2', '0', 'c', '0', '0', '8', '0', '0', '4', '0', '0', '2', '0', '9', '0', 
            '0', '7', '0', '0', '3', '0', 'c', '0', '0', '8', '0', '0', '5', '0', '0', '2', 
            '0', '9', '0', '0', '7', '0', '0', '4', '0', 'c', '0', '0', '8', '0', '0', '4', 
            '0', '0', '2', '0', 'a', '0', '0', '6', '0', '0', '4', '0', 'b', '0', '0', '9', 
            '0', '0', '5', '0', '0', '1', '0', 'a', '0', '0', '6', '0', '0', '3', '0', 'b', 
            '0', '0', '8', '0', '0', '5', '0', '0', '2', '0', 'a', '0', '0', '6', '0', '0', 
            '4', '0', 'c', '0', '0', '8', '0', '0', '5', '0', '0', '1', '0', 'b', '0', '0', 
            '7', '0', '0', '3', '0', '0', '1', '0', '8', '0', '0', '5', '0', '0', '1', '0', 
            '9', '0', '0', '7', '0', '0', '3', '0', 'c', '0', '0', '8', '0', '0', '5', '0', 
            '0', '2', '0', 'a', '0', '0', '7', '0', '0', '3', '0', '0', '1', '0', '9', '0', 
            '0', '5', '0', '0', '3', '0', 'a', '0', '0', '7', '0', '0', '3', '0', 'b', '0', 
            '0', '9', '0', '0', '5', '0', '0', '2', '0', 'a', '0', '0', '6', '0', '0', '4', 
            '0', 'c', '0', '0', '9', '0', '0', '5', '0', '0', '3', '0', 'b', '0', '0', '7', 
            '0', '0', '4', '0', 'c', '0', '0', '9', '0', '0', '5', '0', '0', '1', '0', 'c', 
            '0', '0', '7', '0', '0', '4', '0', 'c', '0', '0', '8', '0', '0', '6', '0', '0', 
            '2', '0', 'b', '0', '0', '7', '0', '0', '4', '0', '0', 'a', '0', '9', '0', '0', 
            '6', '0', '0', '2', '0', 'b', '0', '0', '7', '0', '0', '3', '0', '0', '2', '0', 
            '9', '0', '0', '6', '0', '0', '2', '0', 'a', '0', '0', '5', '0', '0', '4', '0', 
            '0', '1', '0', '9', '0', '0', '5', '0', '0', '3', '0', 'b', '0', '0', '7', '0', 
            '0', '4', '0', '0', '1', '0', '9', '0', '0', '5', '0', '0', '4', '0', 'c', '0', 
            '0', '8', '0', '0', '4', '0', 'c', '0', '0', 'a', '0', '0', '6', '0', '0', '2', 
            '0', 'c', '0', '0', '7', '0', '0', '5', '0', '0', '1', '0', '9', '0', '0', '6', 
            '0', '0', '3', '0', 'b', '0', '0', '7', '0', '0', '5', '0', '0', '2', '0', 'a', 
            '0', '0', '6', '0', '0', '2', '0', 'c', '0', '0', '8', '0', '0', '4', '0', '0', 
            '2', '0', '9', '0', '0', '6', '0', '0', '3', '0', 'b', '0', '0', '8', '0', '0', 
            '4', '0', '0', '2', '0', '9', '0', '0', '6', '0', '0', '3', '0', 'b', '0', '0', 
            '8', '0', '0', '4', '0', '0', '2', '0', 'a', '0', '0', '6', '0', '0', '4', '0', 
            'b', '0', '0', '8', '0', '0', '4', '0', '0', '1', '0', 'b', '0', '0', '6', '0', 
            '0', '3', '0', 'b', '0', '0', '7', '0', '0', '5', '0', '0', '1', '0', 'a', '0', 
            '0', '6', '0', '0', '4', '0', '0', '2', '0', '7', '0', '0', '5', '0', '0', '3', 
            '0', '8', '0', '0', '6', '0', '0', '4', '0', '0', '3', '0', '7', '0', '0', '5', 
            '0', '0', '3', '0', '7', '0', '0', '6', '0', '0', '4', '0', '0', '3', '0', '7', 
            '0', '0', '5', '0', '0', '3', '0', '8', '0', '0', '6', '0', '0', '4', '0', '0', 
            '3', '0', '7', '0', '0', '5', '0', '0', '4', '0', '9', '0', '0', '6', '0', '0', 
            '4', '0', '0', '3', '0', '7', '0', '0', '5', '0', '0', '4', '0', '9', '0', '0', 
            '6', '0', '0', '5', '0', '0', '2', '0', '7', '0', '0', '5', '0', '0', '3', '0', 
            'a', '0', '0', '6', '0', '0', '5', '0', '0', '3', '0', '7', '0', '0', '5', '0', 
            '0', '4', '0', '0', '2', '0', '6', '0', '0', '4', '0', '0', '2', '0', '6', '0', 
            '0', '5', '0', '0', '3', '0', '0', '2', '0', '6', '0', '0', '4', '0', '0', '3', 
            '0', '7', '0', '0', '5', '0', '0', '4', '0', '9', '0', '0', '6', '0', '0', '4', 
            '0', '0', '3', '0', '7', '0', '0', '5', '0', '0', '4', '0', '8', '0', '0', '7', 
            '0', '0', '5', '0', '0', '3', '0', '8', '0', '0', '5', '0', '0', '4', '0', 'a', 
            '0', '0', '6', '0', '0', '5', '0', '0', '3', '0', '7', '0', '0', '5', '0', '0', 
            '4', '0', '0', '2', '0', '6', '0', '0', '5', '0', '0', '3', '0', '8', '0', '0', 
            '5', '0', '0', '4', '0', '0', '2', '0', '6', '0', '0', '5', '0', '0', '2', '0', 
            '7', '0', '0', '5', '0', '0', '4', '0', '0', '2', '0', '6', '0', '0', '5', '0', 
            '0', '3', '0', '7', '0', '0', '6', '0', '0', '4', '0', '0', '2', '0', '7', '0', 
            '0', '5', '0', '0', '3', '0', '8', '0', '0', '6', '0', '0', '4', '0', '0', '3', 
            '0', '7', '0', '0', '5', '0', '0', '4', '0', '8', '0', '0', '6', '0', '0', '4', 
            '0', 'a', '0', '0', '6', '0', '0', '5', '0', '0', '3', '0', '8', '0', '0', '5', 
            '0', '0', '4', '0', '0', '2', '0', '7', '0', '0', '5', '0', '0', '4', '0', '9', 
            '0', '0', '6', '0', '0', '4', '0', '0', '2', '0', '6', '0', '0', '5', '0', '0', 
            '3', '0', 'b', '0', '0', '6', '0', '0', '5', '0', '0', '2', '0', '7', '0', '0', 
            '5', '0', '0', '3', '0', '8', '0', '0', '6', '0', '0', '4', '0', '0', '3', '0', 
            '7', '0', '0', '5', '0', '0', '4', '0', '8', '0', '0', '6', '0', '0', '4', '0', 
            '0', '3', '0', '7', '0', '0', '5', '0', '0', '4', '0', '8', '0', '0', '6', '0', 
            '0', '4', '0', '0', '2', '0', '7', '0', '0', '5', '0', '0', '4', '0', '9', '0', 
            '0', '6', '0', '0', '4', '0', '0', '3', '0', '7', '0', '0', '5', '0', '0', '4', 
            '0', '9', '0', '0', '6', '0', '0', '5', '0', '0', '2', '0', '7', '0', '0', '5', 
            '0', '0', '4', '0', 'b', '0', '0', '6', '0', '0', '5', '0', '0', '3', '0', '7', 
            '0', '0', '6', '0', '0', '4', '0', 'a', '0', '0', '6', '0', '0', '5', '0', '0', 
            '3', '0', '7', '0', '0', '6', '0', '0', '4', '0', '8', '0', '0', '6', '0', '0', 
            '5', '0', '0', '3', '0', '7', '0', '0', '6'
         };
        private static int[] g_leapNumber2 = new int[] { 
            0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6, 
            6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 12, 
            12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 
            0x12, 0x12, 0x13, 0x13, 0x13, 20, 20, 20, 0x15, 0x15, 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 
            0x18, 0x18, 0x18, 0x19, 0x19, 0x1a, 0x1a, 0x1a, 0x1b, 0x1b, 0x1b, 0x1c, 0x1c, 0x1d, 0x1d, 0x1d, 
            30, 30, 30, 0x1f, 0x1f, 0x1f, 0x20, 0x20, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x23, 0x23, 
            0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x27, 0x27, 40, 40, 40, 0x29, 0x29, 
            0x29, 0x2a, 0x2a, 0x2b, 0x2b, 0x2b, 0x2c, 0x2c, 0x2c, 0x2d, 0x2d, 0x2e, 0x2e, 0x2e, 0x2f, 0x2f, 
            0x2f, 0x30, 0x30, 0x30, 0x31, 0x31, 50, 50, 50, 0x33, 0x33, 0x34, 0x34, 0x34, 0x35, 0x35, 
            0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x3a, 0x3a, 0x3b, 
            0x3b, 0x3b, 0x3b, 60, 60, 0x3d, 0x3d, 0x3e, 0x3e, 0x3f, 0x3f, 0x40, 0x40, 0x40, 0x40, 0x41, 
            0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x43, 0x43, 0x44, 0x44, 0x45, 0x45, 0x45, 0x45, 70, 0x47, 
            0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x48, 0x49, 0x49, 0x4a, 0x4a, 0x4a, 0x4b, 0x4b, 0x4b, 0x4b, 
            0x4c, 0x4c, 0x4d, 0x4d, 0x4d, 0x4d, 0x4e, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 80, 80, 80, 0x51, 
            0x52, 0x52, 0x52, 0x53, 0x53, 0x54, 0x54, 0x54, 0x55, 0x55, 0x55, 0x56, 0x56, 0x56, 0x56, 0x57, 
            0x57, 0x57, 0x57, 0x58, 0x58, 0x59, 0x59, 90, 90, 0x5b, 0x5b, 0x5b, 0x5c, 0x5c, 0x5d, 0x5d, 
            0x5e, 0x5e, 0x5e, 0x5e, 0x5f, 0x5f, 0x60, 0x60, 0x60, 0x60, 0x61, 0x61, 0x62, 0x62, 0x62, 0x63, 
            0x63, 100, 100, 100, 0x65, 0x65, 0x65, 0x66, 0x66, 0x66, 0x67, 0x67, 0x68, 0x68, 0x68, 0x69, 
            0x69, 0x69, 0x6a, 0x6a, 0x6a, 0x6b, 0x6b, 0x6b, 0x6c, 0x6c, 0x6d, 0x6d, 0x6d, 110, 110, 0x6f, 
            0x6f, 0x6f, 0x70, 0x70, 0x70, 0x71, 0x71, 0x72, 0x72, 0x72, 0x73, 0x73, 0x74, 0x74, 0x74, 0x75, 
            0x75, 0x75, 0x75, 0x76, 0x76, 0x77, 0x77, 0x77, 120, 120, 0x79, 0x79, 0x79, 0x7a, 0x7a, 0x7a, 
            0x7b, 0x7b, 0x7c, 0x7c, 0x7c, 0x7c, 0x7d, 0x7d, 0x7e, 0x7e, 0x7e, 0x7e, 0x7f, 0x7f, 0x80, 0x80, 
            0x81, 0x81, 130, 130, 130, 130, 0x83, 0x83, 0x84, 0x84, 0x84, 0x85, 0x85, 0x85, 0x86, 0x86, 
            0x87, 0x87, 0x87, 0x88, 0x88, 0x88, 0x89, 0x89, 0x89, 0x8a, 0x8a, 0x8b, 0x8b, 0x8b, 140, 140, 
            0x8d, 0x8d, 0x8d, 0x8e, 0x8e, 0x8e, 0x8f, 0x8f, 0x8f, 0x90, 0x90, 0x90, 0x91, 0x91, 0x92, 0x92, 
            0x92, 0x93, 0x93, 0x93, 0x94, 0x94, 0x95, 0x95, 0x95, 150, 150, 150, 0x97, 0x97, 0x97, 0x98, 
            0x98, 0x99, 0x99, 0x99, 0x9a, 0x9a, 0x9a, 0x9b, 0x9b, 0x9c, 0x9c, 0x9c, 0x9d, 0x9d, 0x9d, 0x9e, 
            0x9e, 0x9e, 0x9f, 0x9f, 160, 160, 160, 0xa1, 0xa1, 0xa1, 0xa2, 0xa2, 0xa3, 0xa3, 0xa3, 0xa4, 
            0xa4, 0xa4, 0xa5, 0xa5, 0xa5, 0xa6, 0xa6, 0xa7, 0xa7, 0xa7, 0xa8, 0xa8, 0xa8, 0xa9, 0xa9, 170, 
            170, 170, 0xab, 0xab, 0xab, 0xac, 0xac, 0xac, 0xad, 0xad, 0xae, 0xae, 0xae, 0xaf, 0xaf, 0xaf, 
            0xb0, 0xb0, 0xb1, 0xb1, 0xb1, 0xb2, 0xb2, 0xb2, 0xb3, 0xb3, 0xb3, 180, 180, 0xb5, 0xb5, 0xb5, 
            0xb6, 0xb6, 0xb6, 0xb7, 0xb7, 0xb8, 0xb8, 0xb8, 0xb9, 0xb9, 0xb9, 0xba, 0xba, 0xba, 0xbb, 0xbb, 
            0xbc, 0xbc, 0xbc, 0xbd, 0xbd, 0xbd, 190, 190, 0xbf, 0xbf, 0xbf, 0xc0, 0xc0, 0xc0, 0xc1, 0xc1, 
            0xc1, 0xc2, 0xc2, 0xc3, 0xc3, 0xc3, 0xc4, 0xc4, 0xc4, 0xc5, 0xc5, 0xc6, 0xc6, 0xc6, 0xc7, 0xc7, 
            0xc7, 200, 200, 200, 0xc9, 0xc9, 0xca, 0xca, 0xca, 0xcb, 0xcb, 0xcb, 0xcc, 0xcc, 0xcd, 0xcd, 
            0xcd, 0xce, 0xce, 0xce, 0xcf, 0xcf, 0xcf, 0xd0, 0xd0, 0xd1, 0xd1, 0xd1, 210, 210, 210, 0xd3, 
            0xd3, 0xd4, 0xd4, 0xd4, 0xd5, 0xd5, 0xd5, 0xd6, 0xd6, 0xd6, 0xd6, 0xd6, 0xd7, 0xd7, 0xd7, 0xd8, 
            0xd8, 0xd8, 0xd9, 0xd9, 0xda, 0xda, 0xda, 0xdb, 0xdb, 0xdb, 220, 220, 0xdd, 0xdd, 0xdd, 0xde, 
            0xde, 0xde, 0xdf, 0xdf, 0xdf, 0xe0, 0xe0, 0xe1, 0xe1, 0xe1, 0xe2, 0xe2, 0xe2, 0xe3, 0xe3, 0xe4, 
            0xe4, 0xe4, 0xe5, 0xe5, 0xe5, 230, 230, 230, 0xe7, 0xe7, 0xe8, 0xe8, 0xe8, 0xe9, 0xe9, 0xe9, 
            0xea, 0xea, 0xeb, 0xeb, 0xeb, 0xec, 0xec, 0xec, 0xed, 0xed, 0xed, 0xee, 0xee, 0xef, 0xef, 0xef, 
            240, 240, 240, 0xf1, 0xf1, 0xf2, 0xf2, 0xf2, 0xf3, 0xf3, 0xf3, 0xf4, 0xf4, 0xf4, 0xf5, 0xf5, 
            0xf6, 0xf6, 0xf6, 0xf7, 0xf7, 0xf7, 0xf8, 0xf8, 0xf9, 0xf9, 0xf9, 250, 250, 250, 0xfb, 0xfb, 
            0xfc, 0xfc, 0xfc, 0xfd, 0xfd, 0xfd, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0x100, 0x100, 0x100, 0x101, 0x101, 
            0x101, 0x102, 0x102, 0x103, 0x103, 0x103, 260, 260, 260, 0x105, 0x105, 0x105, 0x106, 0x106, 0x107, 0x107, 
            0x107, 0x108, 0x108, 0x108, 0x109, 0x109, 0x10a, 0x10a, 0x10a, 0x10b, 0x10b, 0x10b, 0x10c, 0x10c, 0x10c, 0x10d, 
            0x10d, 270, 270, 270, 0x10f, 0x10f, 0x10f, 0x110, 0x110, 0x111, 0x111, 0x111, 0x112, 0x112, 0x112, 0x113, 
            0x113, 0x114, 0x114, 0x114, 0x115, 0x115, 0x115, 0x116, 0x116, 0x116, 0x117, 0x117, 280, 280, 280, 0x119, 
            0x119, 0x119, 0x11a, 0x11a, 0x11b, 0x11b, 0x11b, 0x11c, 0x11c, 0x11c, 0x11d, 0x11d, 0x11d, 0x11e, 0x11e, 0x11f, 
            0x11f, 0x11f, 0x120, 0x120, 0x120, 0x121, 0x121, 290, 290, 290, 0x123, 0x123, 0x123, 0x124, 0x124, 0x124, 
            0x125, 0x125, 0x126, 0x126, 0x126, 0x127, 0x127, 0x127, 0x128, 0x128, 0x129, 0x129, 0x129, 0x12a, 0x12a, 0x12a, 
            0x12b, 0x12b, 0x12b, 300, 300, 0x12d, 0x12d, 0x12d, 0x12e, 0x12e, 0x12e, 0x12f, 0x12f, 0x130, 0x130, 0x130, 
            0x131, 0x131, 0x131, 0x132, 0x132, 0x132, 0x133, 0x133, 0x134, 0x134, 0x134, 0x135, 0x135, 0x135, 310, 310, 
            0x137, 0x137, 0x138, 0x138, 0x138, 0x139, 0x139, 0x139, 0x13a, 0x13a, 0x13b, 0x13b, 0x13b, 0x13c, 0x13c, 0x13c, 
            0x13d, 0x13d, 0x13d, 0x13e, 0x13e, 0x13f, 0x13f, 0x13f, 320, 320, 320, 0x141, 0x141, 0x142, 0x142, 0x142, 
            0x143, 0x143, 0x143, 0x144, 0x144, 0x145, 0x145, 0x145, 0x146, 0x146, 0x146, 0x147, 0x147, 0x147, 0x148, 0x148, 
            0x149, 0x149, 0x149, 330, 330, 330, 0x14b, 0x14b, 0x14c, 0x14c, 0x14c, 0x14d, 0x14d, 0x14d, 0x14e, 0x14e, 
            0x14e, 0x14f, 0x14f, 0x150, 0x150, 0x150, 0x151, 0x151, 0x151, 0x152, 0x152, 0x153, 0x153, 0x153, 340, 340, 
            340, 0x155, 0x155, 0x155, 0x156, 0x156, 0x157, 0x157, 0x157, 0x158, 0x158, 0x158, 0x159, 0x159, 0x15a, 0x15a, 
            0x15a, 0x15b, 0x15b, 0x15b, 0x15c, 0x15c, 0x15c, 0x15d, 0x15d, 350, 350, 350, 0x15f, 0x15f, 0x15f, 0x160, 
            0x160, 0x161, 0x161, 0x161, 0x162, 0x162, 0x162, 0x163, 0x163, 0x163, 0x164, 0x164, 0x165, 0x165, 0x165, 0x166, 
            0x166, 0x166, 0x167, 0x167, 360, 360, 360, 0x169, 0x169, 0x169, 0x16a, 0x16a, 0x16a, 0x16b, 0x16b, 0x16c, 
            0x16c, 0x16c, 0x16d, 0x16d, 0x16d, 0x16e, 0x16e, 0x16f, 0x16f, 0x16f, 0x170, 0x170, 0x170, 0x171, 0x171, 0x171, 
            370, 370, 0x173, 0x173, 0x173, 0x174, 0x174, 0x174, 0x175, 0x175, 0x176, 0x176, 0x176, 0x177, 0x177, 0x177, 
            0x178, 0x178, 0x178, 0x179, 0x179, 0x17a, 0x17a, 0x17a, 0x17b, 0x17b, 0x17b, 380, 380, 0x17d, 0x17d, 0x17d, 
            0x17e, 0x17e, 0x17e, 0x17f, 0x17f, 0x17f, 0x180, 0x180, 0x181, 0x181, 0x181, 0x182, 0x182, 0x182, 0x183, 0x183, 
            0x184, 0x184, 0x184, 0x185, 0x185, 0x185, 390, 390, 390, 0x187, 0x187, 0x188, 0x188, 0x188, 0x189, 0x189, 
            0x189, 0x18a, 0x18a, 0x18b, 0x18b, 0x18b, 0x18c, 0x18c, 0x18c, 0x18d, 0x18d, 0x18d, 0x18e, 0x18e, 0x18f, 0x18f, 
            0x18f, 400, 400, 400, 0x191, 0x191, 0x192, 0x192, 0x192, 0x193, 0x193, 0x193, 0x194, 0x194, 0x194, 0x195, 
            0x195, 0x196, 0x196, 0x196, 0x197, 0x197, 0x197, 0x198, 0x198, 0x199, 0x199, 0x199, 410, 410, 410, 0x19b, 
            0x19b, 0x19b, 0x19c, 0x19c, 0x19d, 0x19d, 0x19d, 0x19e, 0x19e, 0x19e, 0x19f, 0x19f, 0x1a0, 0x1a0, 0x1a0, 0x1a1, 
            0x1a1, 0x1a1, 0x1a2, 0x1a2, 0x1a2, 0x1a3, 0x1a3, 420, 420, 420, 0x1a5, 0x1a5, 0x1a5, 0x1a6, 0x1a6, 0x1a7, 
            0x1a7, 0x1a7, 0x1a8, 0x1a8, 0x1a8, 0x1a9, 0x1a9, 0x1a9, 0x1aa, 0x1aa, 0x1ab, 0x1ab, 0x1ab, 0x1ac, 0x1ac, 0x1ac, 
            0x1ad, 0x1ad, 430, 430, 430, 0x1af, 0x1af, 0x1af, 0x1b0, 0x1b0, 0x1b0, 0x1b1, 0x1b1, 0x1b2, 0x1b2, 0x1b2, 
            0x1b3, 0x1b3, 0x1b3, 0x1b4, 0x1b4, 0x1b5, 0x1b5, 0x1b5, 0x1b6, 0x1b6, 0x1b6, 0x1b7, 0x1b7, 0x1b7, 440, 440, 
            0x1b9, 0x1b9, 0x1b9, 0x1ba, 0x1ba, 0x1ba, 0x1bb, 0x1bb, 0x1bc, 0x1bc, 0x1bc, 0x1bd, 0x1bd, 0x1bd, 0x1be, 0x1be, 
            0x1be, 0x1bf, 0x1bf, 0x1c0, 0x1c0, 0x1c0, 0x1c1, 0x1c1, 0x1c1, 450, 450, 0x1c3, 0x1c3, 0x1c3, 0x1c4, 0x1c4, 
            0x1c4, 0x1c5, 0x1c5, 0x1c5, 0x1c6, 0x1c6, 0x1c7, 0x1c7, 0x1c7, 0x1c8, 0x1c8, 0x1c8, 0x1c9, 0x1c9, 0x1ca, 0x1ca, 
            0x1ca, 0x1cb, 0x1cb, 0x1cb, 460, 460, 460, 0x1cd, 0x1cd, 0x1ce, 0x1ce, 0x1ce, 0x1cf, 0x1cf, 0x1cf, 0x1d0, 
            0x1d0, 0x1d1, 0x1d1, 0x1d1, 0x1d2, 0x1d2, 0x1d2, 0x1d3, 0x1d3, 0x1d3, 0x1d4, 0x1d4, 0x1d5, 0x1d5, 0x1d5, 470, 
            470, 470, 0x1d7, 0x1d7, 0x1d8, 0x1d8, 0x1d8, 0x1d9, 0x1d9, 0x1d9, 0x1da, 0x1da, 0x1da, 0x1db, 0x1db, 0x1db, 
            0x1dc, 0x1dc, 0x1dd, 0x1dd, 0x1dd, 0x1de, 0x1de, 0x1de, 0x1df, 0x1df, 480, 480, 480, 0x1e1, 0x1e1, 0x1e1, 
            0x1e2, 0x1e2, 0x1e2, 0x1e3, 0x1e3, 0x1e4, 0x1e4, 0x1e4, 0x1e5, 0x1e5, 0x1e5, 0x1e6, 0x1e6, 0x1e7, 0x1e7, 0x1e7, 
            0x1e8, 0x1e8, 0x1e8, 0x1e9, 0x1e9, 0x1e9, 490, 490, 0x1eb, 0x1eb, 0x1eb, 0x1ec, 0x1ec, 0x1ec, 0x1ed, 0x1ed, 
            0x1ee, 0x1ee, 0x1ee, 0x1ef, 0x1ef, 0x1ef, 0x1f0, 0x1f0, 0x1f0, 0x1f1, 0x1f1, 0x1f2, 0x1f2, 0x1f2, 0x1f3, 0x1f3, 
            0x1f3, 500, 500, 0x1f5, 0x1f5, 0x1f5, 0x1f6, 0x1f6, 0x1f6, 0x1f7, 0x1f7, 0x1f7, 0x1f8, 0x1f8, 0x1f9, 0x1f9, 
            0x1f9, 0x1fa, 0x1fa, 0x1fa, 0x1fb, 0x1fb, 0x1fc, 0x1fc, 0x1fc, 0x1fd, 0x1fd, 0x1fd, 510, 510, 510, 0x1ff, 
            0x1ff, 0x200, 0x200, 0x200, 0x201, 0x201, 0x201, 0x202, 0x202, 0x203, 0x203, 0x203, 0x204, 0x204, 0x204, 0x205, 
            0x205, 0x205, 0x206, 0x206, 0x207, 0x207, 0x207, 520, 520, 520, 0x209, 0x209, 0x20a, 0x20a, 0x20a, 0x20b, 
            0x20b, 0x20b, 0x20c, 0x20c, 0x20c, 0x20d, 0x20d, 0x20e, 0x20e, 0x20e, 0x20f, 0x20f, 0x20f, 0x210, 0x210, 0x211, 
            0x211, 0x211, 530, 530, 530, 0x213, 0x213, 0x213, 0x214, 0x214, 0x215, 0x215, 0x215, 0x216, 0x216, 0x216, 
            0x217, 0x217, 0x218, 0x218, 0x218, 0x219, 0x219, 0x219, 0x21a, 0x21a, 0x21a, 0x21b, 0x21b, 540, 540, 540, 
            0x21d, 0x21d, 0x21d, 0x21e, 0x21e, 0x21f, 0x21f, 0x21f, 0x220, 0x220, 0x220, 0x221, 0x221, 0x221, 0x222, 0x222, 
            0x223, 0x223, 0x223, 0x224, 0x224, 0x224, 0x225, 0x225, 550, 550, 550, 0x227, 0x227, 0x227, 0x228, 0x228, 
            0x228, 0x229, 0x229, 0x22a, 0x22a, 0x22a, 0x22b, 0x22b, 0x22b, 0x22c, 0x22c, 0x22d, 0x22d, 0x22d, 0x22e, 0x22e, 
            0x22e, 0x22f, 0x22f, 0x22f, 560, 560, 0x231, 0x231, 0x231, 0x232, 0x232, 0x232, 0x233, 0x233, 0x233, 0x234, 
            0x234, 0x235, 0x235, 0x235, 0x236, 0x236, 0x236, 0x237, 0x237, 0x238, 0x238, 0x238, 0x239, 0x239, 0x239, 570, 
            570, 570, 0x23b, 0x23b, 0x23c, 0x23c, 0x23c, 0x23d, 0x23d, 0x23d, 0x23e, 0x23e, 0x23f, 0x23f, 0x23f, 0x240, 
            0x240, 0x240, 0x241, 0x241, 0x242, 0x242, 0x242, 0x243, 0x243, 0x243, 580, 580, 580, 0x245, 0x245, 0x246, 
            0x246, 0x246, 0x247, 0x247, 0x247, 0x248, 0x248, 0x248, 0x249, 0x249, 0x24a, 0x24a, 0x24a, 0x24b, 0x24b, 0x24b, 
            0x24c, 0x24c, 0x24d, 0x24d, 0x24d, 590, 590, 590, 0x24f, 0x24f, 0x24f, 0x250, 0x250, 0x251, 0x251, 0x251, 
            0x252, 0x252, 0x252, 0x253, 0x253, 0x254, 0x254, 0x254, 0x255, 0x255, 0x255, 0x256, 0x256, 0x256, 0x257, 0x257, 
            600, 600, 600, 0x259, 0x259, 0x259, 0x25a, 0x25a, 0x25b, 0x25b, 0x25b, 0x25c, 0x25c, 0x25c, 0x25d, 0x25d, 
            0x25d, 0x25e, 0x25e, 0x25f, 0x25f, 0x25f, 0x260, 0x260, 0x260, 0x261, 0x261, 610, 610, 610, 0x263, 0x263, 
            0x263, 0x264, 0x264, 0x264, 0x265, 0x265, 0x266, 0x266, 0x266, 0x267, 0x267, 0x267, 0x268, 0x268, 0x269, 0x269, 
            0x269, 0x26a, 0x26a, 0x26a, 0x26b, 0x26b, 0x26b, 620, 620, 0x26d, 0x26d, 0x26d, 0x26e, 0x26e, 0x26e, 0x26f, 
            0x26f, 0x270, 0x270, 0x270, 0x271, 0x271, 0x271, 0x272, 0x272, 0x272, 0x273, 0x273, 0x274, 0x274, 0x274, 0x275, 
            0x275, 0x275, 630, 630, 0x277, 0x277, 0x277, 0x278, 0x278, 0x278, 0x279, 0x279, 0x279, 0x27a, 0x27a, 0x27b, 
            0x27b, 0x27b, 0x27c, 0x27c, 0x27c, 0x27d, 0x27d, 0x27e, 0x27e, 0x27e, 0x27f, 0x27f, 0x27f, 640, 640, 640, 
            0x281, 0x281, 0x282, 0x282, 0x282, 0x283, 0x283, 0x283, 0x284, 0x284, 0x285, 0x285, 0x285, 0x286, 0x286, 0x286, 
            0x287, 0x287, 0x287, 0x288, 0x288, 0x289, 0x289, 0x289, 650, 650, 650, 0x28b, 0x28b, 0x28c, 0x28c, 0x28c, 
            0x28d, 0x28d, 0x28d, 0x28e, 0x28e, 0x28e, 0x28f, 0x28f, 0x290, 0x290, 0x290, 0x291, 0x291, 0x291, 0x292, 0x292, 
            0x293, 0x293, 0x293, 660, 660, 660, 0x295, 0x295, 0x295, 0x296, 0x296, 0x297, 0x297, 0x297, 0x298, 0x298, 
            0x298, 0x299, 0x299, 0x29a, 0x29a, 0x29a, 0x29b, 0x29b, 0x29b, 0x29c, 0x29c, 0x29c, 0x29d, 0x29d, 670, 670, 
            670, 0x29f, 0x29f, 0x29f, 0x2a0, 0x2a0, 0x2a1, 0x2a1, 0x2a1, 0x2a2, 0x2a2, 0x2a2, 0x2a3, 0x2a3, 0x2a3, 0x2a4, 
            0x2a4, 0x2a5, 0x2a5, 0x2a5, 0x2a6, 0x2a6, 0x2a6, 0x2a7, 0x2a7, 680, 680, 680, 0x2a9, 0x2a9, 0x2a9, 0x2aa, 
            0x2aa, 0x2aa, 0x2ab, 0x2ab, 0x2ac, 0x2ac, 0x2ac, 0x2ad, 0x2ad, 0x2ad, 0x2ae, 0x2ae, 0x2af, 0x2af, 0x2af, 0x2b0, 
            0x2b0, 0x2b0, 0x2b1, 0x2b1, 0x2b1, 690, 690, 0x2b3, 0x2b3, 0x2b3, 0x2b4, 0x2b4, 0x2b4, 0x2b5, 0x2b5, 0x2b6, 
            0x2b6, 0x2b6, 0x2b7, 0x2b7, 0x2b7, 0x2b8, 0x2b8, 0x2b8, 0x2b9, 0x2b9, 0x2ba, 0x2ba, 0x2ba, 0x2bb, 0x2bb, 0x2bb, 
            700, 700, 0x2bd, 0x2bd, 0x2bd, 0x2be, 0x2be, 0x2be, 0x2bf, 0x2bf, 0x2bf, 0x2c0, 0x2c0, 0x2c1, 0x2c1, 0x2c1, 
            0x2c2, 0x2c2, 0x2c2, 0x2c3, 0x2c3, 0x2c3, 0x2c4, 0x2c4, 0x2c5, 0x2c5, 0x2c5, 710, 710, 710, 0x2c7, 0x2c7, 
            0x2c8, 0x2c8, 0x2c8, 0x2c9, 0x2c9, 0x2c9, 0x2ca, 0x2ca, 0x2ca, 0x2cb, 0x2cb, 0x2cc, 0x2cc, 0x2cc, 0x2cd, 0x2cd, 
            0x2cd, 0x2ce, 0x2ce, 0x2cf, 0x2cf, 0x2cf, 720, 720, 720, 0x2d1, 0x2d1, 0x2d1, 0x2d2, 0x2d2, 0x2d3, 0x2d3, 
            0x2d3, 0x2d4, 0x2d4, 0x2d4, 0x2d5, 0x2d5, 0x2d6, 0x2d6, 0x2d6, 0x2d7, 0x2d7, 0x2d7, 0x2d8, 0x2d8, 0x2d8, 0x2d9, 
            0x2d9, 730, 730, 730, 0x2db, 0x2db, 0x2db, 0x2dc, 0x2dc, 0x2dd, 0x2dd, 0x2dd, 0x2de, 0x2de, 0x2de, 0x2df, 
            0x2df, 0x2e0, 0x2e0, 0x2e0, 0x2e1, 0x2e1, 0x2e1, 0x2e2, 0x2e2, 0x2e2, 0x2e3, 0x2e3, 740, 740, 740, 0x2e5, 
            0x2e5, 0x2e5, 0x2e6, 0x2e6, 0x2e6, 0x2e7, 0x2e7, 0x2e8, 0x2e8, 0x2e8, 0x2e9, 0x2e9, 0x2e9, 0x2ea, 0x2ea, 0x2eb, 
            0x2eb, 0x2eb, 0x2ec, 0x2ec, 0x2ec, 0x2ed, 0x2ed, 0x2ed, 750, 750, 0x2ef, 0x2ef, 0x2ef, 0x2f0, 0x2f0, 0x2f0, 
            0x2f2, 0x2f2, 0x2f3, 0x2f3, 0x2f3, 0x2f4, 0x2f4, 0x2f4, 0x2f5, 0x2f5, 0x2f5, 0x2f6, 0x2f6, 0x2f7, 0x2f7, 0x2f7, 
            760, 760, 760, 0x2f9, 0x2f9, 0x2fa, 0x2fa, 0x2fa, 0x2fb, 0x2fb, 0x2fb, 0x2fc, 0x2fc, 0x2fc, 0x2fd, 0x2fd, 
            0x2fe, 0x2fe, 0x2fe, 0x2ff, 0x2ff, 0x2ff, 0x300, 0x300, 0x301, 0x301, 0x301, 770, 770, 770, 0x303, 0x303, 
            0x303, 0x304, 0x304, 0x305, 0x305, 0x305, 0x306, 0x306, 0x306, 0x307, 0x307, 0x308, 0x308, 0x308, 0x309, 0x309, 
            0x309, 0x30a, 0x30a, 0x30a, 0x30b, 0x30b, 780, 780, 780, 0x30d, 0x30d, 0x30d, 0x30e, 0x30e, 0x30f, 0x30f, 
            0x30f, 0x310, 0x310, 0x310, 0x311, 0x311, 0x311, 0x312, 0x312, 0x313, 0x313, 0x313, 0x314, 0x314, 0x314, 0x315, 
            0x315, 790, 790, 790, 0x317, 0x317, 0x317, 0x318, 0x318, 0x318, 0x319, 0x319, 0x31a, 0x31a, 0x31a, 0x31b, 
            0x31b, 0x31b, 0x31c, 0x31c, 0x31c, 0x31d, 0x31d, 0x31e, 0x31e, 0x31e, 0x31f, 0x31f, 0x31f, 800, 800, 0x321, 
            0x321, 0x321, 0x322, 0x322, 0x322, 0x323, 0x323, 0x324, 0x324, 0x324, 0x325, 0x325, 0x325, 0x326, 0x326, 0x326, 
            0x327, 0x327, 0x328, 0x328, 0x328, 0x329, 0x329, 0x329, 810, 810, 810, 0x32b, 0x32b, 0x32c, 0x32c, 0x32c, 
            0x32d, 0x32d, 0x32d, 0x32e, 0x32e, 0x32f, 0x32f, 0x32f, 0x330, 0x330, 0x330, 0x331, 0x331, 0x332, 0x332, 0x332, 
            0x333, 0x333, 0x333, 820, 820, 820, 0x335, 0x335, 0x336, 0x336, 0x336, 0x337, 0x337, 0x337, 0x338, 0x338, 
            0x339, 0x339, 0x339, 0x33a, 0x33a, 0x33a, 0x33b, 0x33b, 0x33b, 0x33c, 0x33c, 0x33d, 0x33d, 0x33d, 830, 830, 
            830, 0x33f, 0x33f, 0x340, 0x340, 0x340, 0x341, 0x341, 0x341, 0x342, 0x342, 0x342, 0x343, 0x343, 0x344, 0x344, 
            0x344, 0x345, 0x345, 0x345, 0x346, 0x346, 0x347, 0x347, 0x347, 840, 840, 840, 0x349, 0x349, 0x349, 0x34a, 
            0x34a, 0x34b, 0x34b, 0x34b, 0x34c, 0x34c, 0x34c, 0x34d, 0x34d, 0x34d, 0x34e, 0x34e, 0x34f, 0x34f, 0x34f, 0x350, 
            0x350, 0x350, 0x351, 0x351, 850, 850, 850, 0x353, 0x353, 0x353, 0x354, 0x354, 0x354, 0x355, 0x355, 0x356, 
            0x356, 0x356, 0x357, 0x357, 0x357, 0x358, 0x358, 0x359, 0x359, 0x359, 0x35a, 0x35a, 0x35a, 0x35b, 0x35b, 0x35b, 
            860, 860, 0x35d, 0x35d, 0x35d, 0x35e, 0x35e, 0x35e, 0x35f, 0x35f, 0x360, 0x360, 0x35f, 0x360, 0x360, 0x360, 
            0x361, 0x361, 0x361, 0x362, 0x362, 0x363, 0x363, 0x363, 0x364, 0x364, 0x364, 0x365, 0x365, 870, 870, 870, 
            0x367, 0x367, 0x367, 0x368, 0x368, 0x369, 0x369, 0x369, 0x36a, 0x36a, 0x36a, 0x36b, 0x36b, 0x36b, 0x36c, 0x36c, 
            0x36d, 0x36d, 0x36d, 0x36e, 0x36e, 0x36e, 0x36f, 0x36f, 0x36f, 880, 880, 0x371, 0x371, 0x371, 0x372, 0x372, 
            0x372, 0x373, 0x373, 0x374, 0x374, 0x374, 0x375, 0x375, 0x375, 0x376, 0x376, 0x376, 0x377, 0x377, 0x378, 0x378, 
            0x378, 0x379, 0x379, 0x379, 890, 890, 0x37b, 0x37b, 0x37b, 0x37c, 0x37c, 0x37c, 0x37d, 0x37d, 0x37d, 0x37e, 
            0x37e, 0x37f, 0x37f, 0x37f, 0x380, 0x380, 0x380, 0x381, 0x381, 0x382, 0x382, 0x382, 0x383, 0x383, 0x383, 900, 
            900, 900, 0x385, 0x385, 0x386, 0x386, 0x386, 0x387, 0x387, 0x387, 0x388, 0x388, 0x389, 0x389, 0x389, 0x38a, 
            0x38a, 0x38a, 0x38b, 0x38b, 0x38b, 0x38c, 0x38c, 0x38d, 0x38d, 0x38d, 910, 910, 910, 0x38f, 0x38f, 0x390, 
            0x390, 0x390, 0x391, 0x391, 0x391, 0x392, 0x392, 0x392, 0x393, 0x393, 0x394, 0x394, 0x394, 0x395, 0x395, 0x395, 
            0x396, 0x396, 0x397, 0x397, 0x397, 920, 920, 920, 0x399, 0x399, 0x399, 0x39a, 0x39a, 0x39b, 0x39b, 0x39b, 
            0x39c, 0x39c, 0x39c, 0x39d, 0x39d, 0x39d, 0x39e, 0x39e, 0x39f, 0x39f, 0x39f, 0x3a0, 0x3a0, 0x3a0, 0x3a1, 0x3a1, 
            930, 930, 930, 0x3a3, 0x3a3, 0x3a3, 0x3a4, 0x3a4, 0x3a4, 0x3a5, 0x3a5, 0x3a6, 0x3a6, 0x3a6, 0x3a7, 0x3a7, 
            0x3a7, 0x3a8, 0x3a8, 0x3a9, 0x3a9, 0x3a9, 0x3aa, 0x3aa, 0x3aa, 0x3ab, 0x3ab, 0x3ab, 940, 940, 0x3ad, 0x3ad, 
            0x3ad, 0x3ae, 0x3ae, 0x3ae, 0x3af, 0x3af, 0x3b0, 0x3b0, 0x3b0, 0x3b1, 0x3b1, 0x3b1, 0x3b2, 0x3b2, 0x3b2, 0x3b3, 
            0x3b3, 0x3b4, 0x3b4, 0x3b4, 0x3b5, 0x3b5, 0x3b5, 950, 950, 0x3b7, 0x3b7, 0x3b7, 0x3b8, 0x3b8, 0x3b8, 0x3b9, 
            0x3b9, 0x3b9, 0x3ba, 0x3ba, 0x3bb, 0x3bb, 0x3bb, 0x3bc, 0x3bc, 0x3bc, 0x3bd, 0x3bd, 0x3be, 0x3be, 0x3be, 0x3bf, 
            0x3bf, 0x3bf, 960, 960, 960, 0x3c1, 0x3c1, 0x3c2, 0x3c2, 0x3c2, 0x3c3, 0x3c3, 0x3c3, 0x3c4, 0x3c4, 0x3c5, 
            0x3c5, 0x3c5, 0x3c6, 0x3c6, 0x3c6, 0x3c7, 0x3c7, 0x3c7, 0x3c8, 0x3c8, 0x3c9, 0x3c9, 0x3c9, 970, 970, 970, 
            0x3cb, 0x3cb, 0x3cb, 0x3cc, 0x3cc, 0x3cd, 0x3cd, 0x3cd, 0x3ce, 0x3ce, 0x3ce, 0x3cf, 0x3cf, 0x3d0, 0x3d0, 0x3d0, 
            0x3d1, 0x3d1, 0x3d1, 0x3d2, 0x3d2, 0x3d2, 0x3d3, 0x3d3, 980, 980, 980, 0x3d5, 0x3d5, 0x3d5, 0x3d6, 0x3d6, 
            0x3d7, 0x3d7, 0x3d7, 0x3d8, 0x3d8, 0x3d8, 0x3d9, 0x3d9, 0x3da, 0x3da, 0x3da, 0x3db, 0x3db, 0x3db, 0x3dc, 0x3dc, 
            0x3dc, 0x3dd, 0x3dd, 990, 990, 990, 0x3df, 0x3df, 0x3df, 0x3e0, 0x3e0, 0x3e1, 0x3e1, 0x3e1, 0x3e2, 0x3e2, 
            0x3e2, 0x3e3, 0x3e3, 0x3e3, 0x3e4, 0x3e4, 0x3e5, 0x3e5, 0x3e5, 0x3e6, 0x3e6, 0x3e6, 0x3e7, 0x3e7, 0x3e8, 0x3e8, 
            0x3e8, 0x3e9, 0x3e9, 0x3e9, 0x3ea, 0x3ea, 0x3ea, 0x3eb, 0x3eb, 0x3ec, 0x3ec, 0x3ec, 0x3ed, 0x3ed, 0x3ed, 0x3ee, 
            0x3ee, 0x3ee, 0x3ef, 0x3ef, 0x3f0, 0x3f0, 0x3f0, 0x3f1, 0x3f1, 0x3f1, 0x3f2, 0x3f2, 0x3f3, 0x3f3, 0x3f3, 0x3f4, 
            0x3f4, 0x3f4, 0x3f5, 0x3f5, 0x3f5, 0x3f6, 0x3f6, 0x3f7, 0x3f7, 0x3f7, 0x3f8, 0x3f8, 0x3f8, 0x3f9, 0x3f9, 0x3fa, 
            0x3fa, 0x3fa, 0x3fb, 0x3fb, 0x3fb, 0x3fc, 0x3fc, 0x3fc, 0x3fd, 0x3fd, 0x3fe, 0x3fe, 0x3fe, 0x3ff, 0x3ff, 0x3ff, 
            0x400, 0x400, 0x401, 0x401, 0x401, 0x402, 0x402, 0x402, 0x403, 0x403, 0x403, 0x404, 0x404, 0x405, 0x405, 0x405, 
            0x406, 0x406, 0x406, 0x407, 0x407, 0x408, 0x408, 0x408, 0x409, 0x409, 0x409, 0x40a, 0x40a, 0x40a, 0x40b, 0x40b, 
            0x40c, 0x40c, 0x40c, 0x40d, 0x40d, 0x40d, 0x40e, 0x40e, 0x40f, 0x40f, 0x40f, 0x410, 0x410, 0x410, 0x411, 0x411, 
            0x412, 0x412, 0x412, 0x413, 0x413, 0x413, 0x414, 0x414, 0x414, 0x415, 0x415, 0x416, 0x416, 0x416, 0x417, 0x417, 
            0x417, 0x418, 0x418, 0x418, 0x419, 0x419, 0x41a, 0x41a, 0x41a, 0x41b, 0x41b, 0x41b, 0x41c, 0x41c, 0x41d, 0x41d, 
            0x41d, 0x41e, 0x41e, 0x41e, 0x41f, 0x41f, 0x41f, 0x420, 0x420, 0x421, 0x421, 0x421, 0x422, 0x422, 0x422, 0x423, 
            0x423, 0x424, 0x424, 0x424, 0x425, 0x425, 0x425, 0x426, 0x426, 0x426, 0x427, 0x427, 0x428, 0x428, 0x428, 0x429, 
            0x429, 0x429, 0x42a, 0x42a, 0x42b, 0x42b, 0x42b, 0x42c, 0x42c, 0x42c, 0x42d, 0x42d, 0x42d, 0x42e, 0x42e, 0x42f, 
            0x42f, 0x42f, 0x430, 0x430, 0x430, 0x431, 0x431, 0x432, 0x432, 0x432, 0x433, 0x433, 0x433, 0x434, 0x434, 0x434, 
            0x435, 0x435, 0x436, 0x436, 0x436, 0x437, 0x437, 0x437, 0x438, 0x438, 0x439, 0x439, 0x439, 0x43a, 0x43a, 0x43a, 
            0x43b, 0x43b, 0x43b, 0x43c, 0x43c, 0x43d, 0x43d, 0x43d, 0x43e, 0x43e, 0x43e, 0x43f, 0x43f, 0x440, 0x440, 0x440, 
            0x441, 0x441, 0x441, 0x442, 0x442, 0x442, 0x443, 0x443, 0x444, 0x444, 0x444, 0x445, 0x445, 0x445, 0x446, 0x446, 
            0x447, 0x447, 0x447, 0x448, 0x448, 0x448, 0x449, 0x449, 0x449, 0x44a, 0x44a, 0x44b, 0x44b, 0x44b, 0x44c, 0x44c, 
            0x44c, 0x44d, 0x44d, 0x44e, 0x44e, 0x44e, 0x44f, 0x44f, 0x44f, 0x450, 0x450, 0x450, 0x451, 0x451, 0x452, 0x452, 
            0x452, 0x453, 0x453, 0x453, 0x454, 0x454, 0x455, 0x455, 0x455, 0x456, 0x456, 0x456, 0x457, 0x457, 0x457, 0x458, 
            0x458, 0x459, 0x459, 0x459, 0x45a, 0x45a, 0x45a, 0x45b, 0x45b, 0x45c, 0x45c, 0x45c, 0x45d, 0x45d, 0x45d, 0x45e, 
            0x45e, 0x45e, 0x45f, 0x45f, 0x460, 0x460, 0x460, 0x461
         };
        private static string[] g_TwelveClash = new string[] { "冲鼠(子午相冲)", "冲牛(丑未相冲)", "冲虎(寅申相冲)", "冲兔(卯酉相冲)", "冲龙(辰戌相冲)", "冲蛇(巳亥相冲)", "冲马(子午相冲)", "冲羊(丑未相冲)", "冲猴(寅申相冲)", "冲鸡(卯酉相冲)", "冲狗(辰戌相冲)", "冲猪(巳亥相冲)" };
        private static int[] GlYearDaysList = new int[] { 
            0x16d, 730, 0x447, 0x5b4, 0x722, 0x88f, 0x9fc, 0xb69, 0xcd7, 0xe44, 0xfb1, 0x111e, 0x128c, 0x13f9, 0x1566, 0x16d3, 
            0x1841, 0x19ae, 0x1b1b, 0x1c88, 0x1df6, 0x1f63, 0x20d0, 0x223d, 0x23ab, 0x2518, 0x2685, 0x27f2, 0x2960, 0x2acd, 0x2c3a, 0x2da7, 
            0x2f15, 0x3082, 0x31ef, 0x335c, 0x34ca, 0x3637, 0x37a4, 0x3911, 0x3a7f, 0x3bec, 0x3d59, 0x3ec6, 0x4034, 0x41a1, 0x430e, 0x447b, 
            0x45e9, 0x4756, 0x48c3, 0x4a30, 0x4b9e, 0x4d0b, 0x4e78, 0x4fe5, 0x5153, 0x52c0, 0x542d, 0x559a, 0x5708, 0x5875, 0x59e2, 0x5b4f, 
            0x5cbd, 0x5e2a, 0x5f97, 0x6104, 0x6272, 0x63df, 0x654c, 0x66b9, 0x6827, 0x6994, 0x6b01, 0x6c6e, 0x6ddc, 0x6f49, 0x70b6, 0x7223, 
            0x7391, 0x74fe, 0x766b, 0x77d8, 0x7946, 0x7ab3, 0x7c20, 0x7d8d, 0x7efb, 0x8068, 0x81d5, 0x8342, 0x84b0, 0x861d, 0x878a, 0x88f7, 
            0x8a65, 0x8bd2, 0x8d3f, 0x8eac, 0x901a, 0x9187, 0x92f4, 0x9461, 0x95cf, 0x973c, 0x98a9, 0x9a16, 0x9b84, 0x9cf1, 0x9e5e, 0x9fcb, 
            0xa139, 0xa2a6, 0xa413, 0xa580, 0xa6ee, 0xa85b, 0xa9c8, 0xab35, 0xaca3, 0xae10, 0xaf7d, 0xb0ea, 0xb258, 0xb3c5, 0xb532, 0xb69f, 
            0xb80d, 0xb97a, 0xbae7, 0xbc54, 0xbdc2, 0xbf2f, 0xc09c, 0xc209, 0xc377, 0xc4e4, 0xc651, 0xc7be, 0xc92c, 0xca99, 0xcc06, 0xcd73, 
            0xcee1, 0xd04e, 0xd1bb, 0xd328, 0xd496, 0xd603
         };
        private static int[] lunarInfo = new int[] { 
            0x4bd8, 0x4ae0, 0xa570, 0x54d5, 0xd260, 0xd950, 0x16554, 0x56a0, 0x9ad0, 0x55d2, 0x4ae0, 0xa5b6, 0xa4d0, 0xd250, 0x1d255, 0xb540, 
            0xd6a0, 0xada2, 0x95b0, 0x14977, 0x4970, 0xa4b0, 0xb4b5, 0x6a50, 0x6d40, 0x1ab54, 0x2b60, 0x9570, 0x52f2, 0x4970, 0x6566, 0xd4a0, 
            0xea50, 0x6e95, 0x5ad0, 0x2b60, 0x186e3, 0x92e0, 0x1c8d7, 0xc950, 0xd4a0, 0x1d8a6, 0xb550, 0x56a0, 0x1a5b4, 0x25d0, 0x92d0, 0xd2b2, 
            0xa950, 0xb557, 0x6ca0, 0xb550, 0x15355, 0x4da0, 0xa5d0, 0x14573, 0x52d0, 0xa9a8, 0xe950, 0x6aa0, 0xaea6, 0xab50, 0x4b60, 0xaae4, 
            0xa570, 0x5260, 0xf263, 0xd950, 0x5b57, 0x56a0, 0x96d0, 0x4dd5, 0x4ad0, 0xa4d0, 0xd4d4, 0xd250, 0xd558, 0xb540, 0xb6a0, 0x195a6, 
            0x95b0, 0x49b0, 0xa974, 0xa4b0, 0xb27a, 0x6a50, 0x6d40, 0xaf46, 0xab60, 0x9570, 0x4af5, 0x4970, 0x64b0, 0x74a3, 0xea50, 0x6b58, 
            0x55c0, 0xab60, 0x96d5, 0x92e0, 0xc960, 0xd954, 0xd4a0, 0xda50, 0x7552, 0x56a0, 0xabb7, 0x25d0, 0x92d0, 0xcab5, 0xa950, 0xb4a0, 
            0xbaa4, 0xad50, 0x55d9, 0x4ba0, 0xa5b0, 0x15176, 0x52b0, 0xa930, 0x7954, 0x6aa0, 0xad50, 0x5b52, 0x4b60, 0xa6e6, 0xa4e0, 0xd260, 
            0xea65, 0xd530, 0x5aa0, 0x76a3, 0x96d0, 0x4bdb, 0x4ad0, 0xa4d0, 0x1d0b6, 0xd250, 0xd520, 0xdd45, 0xb5a0, 0x56d0, 0x55b2, 0x49b0, 
            0xa577, 0xa4b0, 0xaa50, 0x1b255, 0x6d20, 0xada0
         };
        private static int[] NlYearDaysList = new int[] { 
            0x180, 0x2e2, 0x445, 0x5c4, 0x726, 0x889, 0xa09, 0xb6b, 0xcce, 0xe4e, 0xfb0, 0x1130, 0x1292, 0x13f4, 0x1574, 0x16d6, 
            0x1839, 0x19b9, 0x1b1c, 0x1c9c, 0x1dfe, 0x1f60, 0x20e0, 0x2242, 0x23a4, 0x2525, 0x2687, 0x27ea, 0x296a, 0x2acc, 0x2c4b, 0x2dad, 
            0x2f10, 0x3090, 0x31f3, 0x3355, 0x34d5, 0x3637, 0x37b7, 0x3919, 0x3a7b, 0x3bfb, 0x3d5e, 0x3ec0, 0x4041, 0x41a3, 0x4305, 0x4485, 
            0x45e7, 0x4767, 0x48c9, 0x4a2c, 0x4bac, 0x4d0e, 0x4e71, 0x4ff1, 0x5153, 0x52d2, 0x5435, 0x5597, 0x5717, 0x587a, 0x59dc, 0x5b5c, 
            0x5cbf, 0x5e20, 0x5fa0, 0x6103, 0x6283, 0x63e5, 0x6548, 0x66c8, 0x682a, 0x698c, 0x6b0c, 0x6c6e, 0x6dee, 0x6f50, 0x70b3, 0x7233, 
            0x7396, 0x74f8, 0x7678, 0x77da, 0x795a, 0x7abc, 0x7c1e, 0x7d9e, 0x7f01, 0x8064, 0x81e4, 0x8346, 0x84a8, 0x8627, 0x878a, 0x890a, 
            0x8a6c, 0x8bcf, 0x8d4f, 0x8eb1, 0x9013, 0x9193, 0x92f5, 0x9458, 0x95d8, 0x973a, 0x98bb, 0x9a1d, 0x9b7f, 0x9cff, 0x9e61, 0x9fc3, 
            0xa143, 0xa2a6, 0xa426, 0xa588, 0xa6eb, 0xa86b, 0xa9cd, 0xab2f, 0xacaf, 0xae11, 0xaf74, 0xb0f4, 0xb256, 0xb3d6, 0xb538, 0xb69a, 
            0xb81a, 0xb97d, 0xbadf, 0xbc5f, 0xbdc2, 0xbf42, 0xc0a4, 0xc206, 0xc386, 0xc4e8, 0xc64a, 0xc7ca, 0xc92d, 0xca90, 0xcc10, 0xcd72, 
            0xcef2, 0xd054, 0xd1b6, 0xd336, 0xd498, 0xd4cf
         };
        private static int[] solarMonth = new int[] { 0x1f, 0x1c, 0x1f, 30, 0x1f, 30, 0x1f, 0x1f, 30, 0x1f, 30, 0x1f };

        public static DateInfo AddOneDay(DateInfo l_date)
        {
            DateInfo info = new DateInfo {
                year = l_date.year,
                month = l_date.month,
                day = l_date.day
            };
            if (((info.year == 0x62e) && (info.month == 10)) && (info.day == 4))
            {
                info.day = 15;
                return info;
            }
            if ((((info.month == 1) || (info.month == 3)) || ((info.month == 5) || (info.month == 7))) || (((info.month == 8) || (info.month == 10)) || (info.month == 12)))
            {
                if (info.day >= 0x1f)
                {
                    info.month++;
                    info.day = 1;
                    if (info.month == 13)
                    {
                        info.year++;
                        info.month = 1;
                    }
                    return info;
                }
                info.day++;
                return info;
            }
            if (((info.month == 4) || (info.month == 6)) || ((info.month == 9) || (info.month == 11)))
            {
                if (info.day >= 30)
                {
                    info.month++;
                    info.day = 1;
                    return info;
                }
                info.day++;
                return info;
            }
            if (IsLeapYear(info.year))
            {
                if (info.day >= 0x1d)
                {
                    info.month++;
                    info.day = 1;
                    return info;
                }
                info.day++;
                return info;
            }
            if (info.day >= 0x1c)
            {
                info.month++;
                info.day = 1;
                return info;
            }
            info.day++;
            return info;
        }

        public static void AdjustByJieQi(ref int year, ref int month, ref int day)
        {
            int num = GetDayFromYearBegin(year, month, day);
            if (num < ((int) GetJieQiDayTimeFromYear(year, 3)))
            {
                int jieQiDayTimeFromYear = (int) GetJieQiDayTimeFromYear(year, 1);
                year--;
                if (num < jieQiDayTimeFromYear)
                {
                    month = 11;
                }
                else
                {
                    month = 12;
                }
            }
            else
            {
                for (int i = 1; i <= 12; i++)
                {
                    int num4 = (int) GetJieQiDayTimeFromYear(year, (2 * i) + 1);
                    if (num < num4)
                    {
                        break;
                    }
                    month = i;
                }
            }
        }

        public static void AdjustByJieQi(ref int year, ref int month, ref int day, ref int hour)
        {
            int num = 0;
            int num2 = 0;
            int num3 = 0;
            int minute = 0;
            GetJieQiInAYear(year, 2, ref num, ref num2, ref num3, ref minute);
            int num5 = 0;
            int num6 = 0;
            int num7 = 0;
            GetJieQiInAYear(year, 0, ref num5, ref num6, ref num7, ref minute);
            int num8 = GetDayFromYearBegin(year, month, day);
            if ((num8 < ((int) GetJieQiDayTimeFromYear(year, 3))) || ((num8 == ((int) GetJieQiDayTimeFromYear(year, 3))) && (hour < num3)))
            {
                year--;
                int num9 = num6;
                if (num8 < num9)
                {
                    month = 11;
                }
                else if ((num8 == num9) && (hour < num7))
                {
                    month = 11;
                }
                else
                {
                    month = 12;
                }
            }
            else
            {
                if ((num8 == ((int) GetJieQiDayTimeFromYear(year, 3))) && (hour < num3))
                {
                    year--;
                }
                int num10 = 0;
                int num11 = 0;
                int num12 = 0;
                for (int i = 1; i <= 12; i++)
                {
                    GetJieQiInAYear(year, 2 * i, ref num10, ref num11, ref num12, ref minute);
                    int jieQiDayTimeFromYear = (int) GetJieQiDayTimeFromYear(year, (2 * i) + 1);
                    if (num8 < jieQiDayTimeFromYear)
                    {
                        break;
                    }
                    if ((num8 == jieQiDayTimeFromYear) && (hour < num12))
                    {
                        month = i - 1;
                    }
                    else
                    {
                        month = i;
                    }
                }
            }
        }

        public static int CombineGanZhi(int gan, int zhi)
        {
            for (int i = 0; i < 6; i++)
            {
                int num3 = (i * 10) + gan;
                if ((num3 % 12) == zhi)
                {
                    return num3;
                }
            }
            return -1;
        }

       

        public static bool ExtractGanZhi(int ganzhi, ref int gan, ref int zhi)
        {
            if ((ganzhi < 0) || (ganzhi > 0x3b))
            {
                return false;
            }
            gan = ganzhi % 10;
            zhi = ganzhi % 12;
            return true;
        }

        public static int GetAllDays(int year, int month, int day)
        {
            return (GetBasicDays(year, month, day) + GetLeapDays(year, month, day));
        }

        public static double GetAng(double X, double T, double C1, double T0, double T2, double T3)
        {
            double num = 3.1415926535;
            return (((((GetTail(C1 * X) * 2.0) * num) + T0) - ((T2 * T) * T)) - (((T3 * T) * T) * T));
        }

        public static int GetBasicDays(int year, int month, int day)
        {
            int num = 0;
            if (year > 0)
            {
                num = (year - 1) * 0x16d;
            }
            else
            {
                num = year * 0x16d;
            }
            for (int i = 1; i <= (month - 1); i++)
            {
                num += GetMonthDays(year, i);
            }
            return (num + day);
        }

        public static int GetCalendarType(int year, int month, int day)
        {
            if (year < 0x62e)
            {
                return 1;
            }
            if ((year == 0x62e) && (month < 10))
            {
                return 1;
            }
            if (((year == 0x62e) && (month == 10)) && (day <= 4))
            {
                return 1;
            }
            if (((year == 0x62e) && (month == 10)) && ((day >= 5) && (day <= 14)))
            {
                return 0;
            }
            return 2;
        }

        public static string GetClash(DateInfo date)
        {
            int diZhiIndex = GetDiZhiIndex(GetLlGZDay(date).Substring(1, 1));
            if (diZhiIndex == -1)
            {
            }
            return g_TwelveClash[(diZhiIndex + 0x12) % 12];
        }

        public static string GetClashShort(DateInfo date)
        {
            int diZhiIndex = GetDiZhiIndex(GetLlGZDay(date).Substring(1, 1));
            if (diZhiIndex == -1)
            {
            }
            return cShuXiang[(diZhiIndex + 0x12) % 12];
        }

        public static int GetDayFromYearBegin(int year, int month, int day)
        {
            int num = 0;
            for (int i = 1; i <= (month - 1); i++)
            {
                num += GetMonthDays(year, i);
            }
            return (num + day);
        }

        public static int GetDiZhiIndex(string sDiZhi)
        {
            string[] strArray = new string[] { "子", "丑", "寅", "卯", "辰", "巳", "午", "未", "申", "酉", "戌", "亥" };
            for (int i = 0; i < 12; i++)
            {
                if (sDiZhi == strArray[i])
                {
                    return i;
                }
            }
            return -1;
        }

        public static int GetEquStandardDays(int year, int month, int day)
        {
            switch (GetCalendarType(year, month, day))
            {
                case 1:
                    return (((((year - 1) * 0x16d) + ((year - 1) / 4)) + GetDayFromYearBegin(year, month, day)) - 2);

                case 2:
                    return ((((((year - 1) * 0x16d) + ((year - 1) / 4)) - ((year - 1) / 100)) + ((year - 1) / 400)) + GetDayFromYearBegin(year, month, day));
            }
            return 0;
        }

        public static int GetGanZhiFromDay(int year, int month, int day, int hour)
        {
            int num = (GetAllDays(year, month, day) + 12) % 60;
            if (num < 0)
            {
                num += 60;
            }
            if (hour == 0x17)
            {
                if (num == 0x3b)
                {
                    return 0;
                }
                num++;
            }
            return num;
        }

        public static int GetGanZhiFromMonth(int year, int month, int day, int hour)
        {
            int gan = 0;
            int zhi = 0;
            AdjustByJieQi(ref year, ref month, ref day, ref hour);
            int num3 = -1;
            ExtractGanZhi(GetGanZhiFromYear(year), ref gan, ref zhi);
            int[] numArray = new int[] { 2, 4, 6, 8, 0 };
            num3 = numArray[(gan >= 5) ? (gan - 5) : gan];
            num3 += (month - 1) % 10;
            if (num3 >= 10)
            {
                num3 = num3 % 10;
            }
            return CombineGanZhi(num3, ((month - 1) + 2) % 12);
        }

        public static int GetGanZhiFromYear(int year)
        {
            int num;
            if (year > 0)
            {
                num = (year - 4) % 60;
            }
            else
            {
                num = (year - 3) % 60;
            }
            if (num < 0)
            {
                num += 60;
            }
            return num;
        }

        public static int GetGanZhiFromYear(int year, int month, int day, int hour, ref int NLYear)
        {
            int num = (int) Math.Floor(GetJieQiDayTimeFromYear(year, 3));
            if (GetDayFromYearBegin(year, month, day) < num)
            {
                year--;
            }
            NLYear = year;
            return GetGanZhiFromYear(year);
        }

        public static DateInfo GetGlDate(DateInfo nldate)
        {
            if ((((nldate.year > 0x897) || (nldate.year < -849)) || ((nldate.month > 12) || (nldate.month < 1))) || ((nldate.day > 30) || (nldate.day < 1)))
            {
                return nldate;
            }
            DateInfo glDateFun = new DateInfo();
            if ((nldate.year < 0x76c) || (nldate.year > 0x800))
            {
                glDateFun = GetGlDateFun(nldate);
            }
            else
            {
                glDateFun = GetGlDateEx(nldate);
            }
            glDateFun.hour = nldate.hour;
            glDateFun.minute = nldate.minute;
            return glDateFun;
        }

        public static DateInfo GetGlDateEx(DateInfo nlDate)
        {
            DateInfo info = new DateInfo();
            if ((nlDate.year < 0x76c) || (nlDate.year > 0x801))
            {
                info.year = -1;
                return info;
            }
            int num = lunarInfo[nlDate.year - 0x76c] & 15;
            if (nlDate.isRunYue && (num != nlDate.month))
            {
                info.year = -2;
                return info;
            }
            int num2 = 0;
            if (nlDate.year == 0x76c)
            {
                num2 = 0;
            }
            else
            {
                num2 = NlYearDaysList[(nlDate.year - 0x76c) - 1];
            }
            int num3 = 0;
            if (num == 0)
            {
                int num4 = 1;
                for (int i = 0x8000; (i > 8) && (num4 < nlDate.month); i = i >> 1)
                {
                    num3 += ((lunarInfo[nlDate.year - 0x76c] & i) != 0) ? 1 : 0;
                    num4++;
                }
                num3 += 0x1d * (nlDate.month - 1);
            }
            else if (nlDate.isRunYue)
            {
                int num6 = 1;
                for (int j = 0x8000; (j > 8) && (num6 <= nlDate.month); j = j >> 1)
                {
                    num3 += ((lunarInfo[nlDate.year - 0x76c] & j) != 0) ? 1 : 0;
                    num6++;
                }
                num3 += 0x1d * nlDate.month;
            }
            else
            {
                int num8 = 1;
                for (int k = 0x8000; (k > 8) && (num8 < nlDate.month); k = k >> 1)
                {
                    num3 += ((lunarInfo[nlDate.year - 0x76c] & k) != 0) ? 1 : 0;
                    num8++;
                }
                num3 += 0x1d * (nlDate.month - 1);
                if (nlDate.month > num)
                {
                    num3 += ((lunarInfo[nlDate.year - 0x76c] & 0x10000) != 0) ? 30 : 0x1d;
                }
            }
            num2 += num3;
            num2 += nlDate.day - 1;
            num2 += 0x1f;
            int index = 0;
            int num11 = 0;
            int num12 = 0;
            info.year = 0x76c;
            info.month = 1;
            info.day = 1;
            while (true)
            {
                if ((num2 - GlYearDaysList[num12]) <= 0)
                {
                    break;
                }
                num12++;
            }
            if (num12 > 0)
            {
                num2 -= GlYearDaysList[num12 - 1];
            }
            info.year = 0x76c + num12;
            for (index = 0; index < 12; index++)
            {
                if ((index == 1) && ((((info.year % 4) == 0) && ((info.year % 100) != 0)) || ((info.year % 400) == 0)))
                {
                    num11 = 0x1d;
                }
                else
                {
                    num11 = solarMonth[index];
                }
                num2 -= num11;
                if (num2 <= 0)
                {
                    info.month = index + 1;
                    info.day = num2 + num11;
                    return info;
                }
            }
            return info;
        }

        public static DateInfo GetGlDateFun(DateInfo nldate)
        {
            DateInfo date = new DateInfo();
            DateInfo info2 = new DateInfo();
            date.year = nldate.year;
            date.month = nldate.month;
            date.day = 1;
            while (true)
            {
                info2 = Lunar(date);
                if ((info2.month == nldate.month) && (info2.day == 1))
                {
                    break;
                }
                date = AddOneDay(date);
            }
            if (nldate.isRunYue)
            {
                date = AddOneDay(date);
                while (true)
                {
                    info2 = Lunar(date);
                    if ((info2.month == nldate.month) && (info2.day == 1))
                    {
                        break;
                    }
                    date = AddOneDay(date);
                }
            }
            while (true)
            {
                info2 = Lunar(date);
                if ((info2.month == nldate.month) && (info2.day == nldate.day))
                {
                    return date;
                }
                date = AddOneDay(date);
            }
        }

        public static bool GetIsLeapYear(int year)
        {
            if (GetCalendarType(year, 1, 1) == 2)
            {
                return ((((year % 4) == 0) && ((year % 100) != 0)) || ((year % 400) == 0));
            }
            if (year >= 0)
            {
                return ((year % 4) == 0);
            }
            return (((year - 3) % 4) == 0);
        }

        public static double GetJieQiDayTimeFromYear(int year, int n)
        {
            if (year <= 0)
            {
                year++;
            }
            double num = ((year * ((365.2423112 - ((6.4E-14 * (year - 100)) * (year - 100))) - (3.047E-08 * (year - 100)))) + (15.218427 * n)) + 1721050.71301;
            double a = ((0.0003 * year) - 0.372781384) - (0.2617913325 * n);
            double num3 = ((1.945 * Math.Sin(a)) - (0.01206 * Math.Sin(2.0 * a))) * (1.048994 - (2.583E-05 * year));
            double num4 = -0.0018 * Math.Sin(((2.313908653 * year) - 0.439822951) - (3.0443 * n));
            return ((((num + num3) + num4) - GetEquStandardDays(year, 1, 0)) - 1721425.0);
        }

        public static DateTime GetJieQiInAYear(int year, int n)
        {
            int month = 0;
            int day = 0;
            int hour = 0;
            int minute = 0;
            if (n == 0x18)
            {
                n = 0;
                year++;
            }
            GetJieQiInAYear(year, n, ref month, ref day, ref hour, ref minute);
            return new DateTime(year, month, day, hour, minute, 0);
        }

        public static bool GetJieQiInAYear(int year, int n, ref int month, ref int day, ref int hour, ref int minute)
        {
            if ((n < 0) || (n > 0x17))
            {
                return false;
            }
            double jieQiDayTimeFromYear = GetJieQiDayTimeFromYear(year, n + 1);
            for (int i = 1; i <= 12; i++)
            {
                int monthDays = GetMonthDays(year, i);
                if (jieQiDayTimeFromYear > monthDays)
                {
                    jieQiDayTimeFromYear -= monthDays;
                }
                else
                {
                    month = i;
                    break;
                }
            }
            day = (int) jieQiDayTimeFromYear;
            jieQiDayTimeFromYear -= (double) day;
            hour = (int) (jieQiDayTimeFromYear * 24.0);
            jieQiDayTimeFromYear = (jieQiDayTimeFromYear * 24.0) - ((double) hour);
            minute = (int) ((jieQiDayTimeFromYear * 60.0) + 0.5);
            if (minute >= 60)
            {
                minute = 0x38;
            }
            return true;
        }

        public static string GetJieQiName(int n)
        {
            string[] strArray = new string[] { 
                "小寒", "大寒", "立春", "雨水", "惊蛰", "春分", "清明", "谷雨", "立夏", "小满", "芒种", "夏至", "小暑", "大暑", "立秋", "处暑", 
                "白露", "秋分", "寒露", "霜降", "立冬", "小雪", "大雪", "冬至"
             };
            return strArray[n - 1];
        }

      
        public static int GetLeapDays(int year, int month, int day)
        {
            int num;
            if (year < 0)
            {
                return -((-year + 3) / 4);
            }
            switch (GetCalendarType(year, month, day))
            {
                case 1:
                case 0:
                    num = 0;
                    break;

                default:
                    num = 10;
                    if (year > 0x6a4)
                    {
                        num += 1 + ((year - 0x6a5) / 100);
                        num -= (year - 0x641) / 400;
                    }
                    break;
            }
            return (((year - 1) / 4) - num);
        }

        public static int GetLeapMonth(int year)
        {
            char ch = g_leapMonth2[year + 0x351];
            if ((ch >= '0') && (ch <= '9'))
            {
                return (ch - '0');
            }
            if ((ch >= 'a') && (ch <= 'c'))
            {
                return (('\n' + ch) - 0x61);
            }
            return -1;
        }

        public static int GetLeapNum(int year)
        {
            if (year < 0)
            {
                return g_leapNumber2[year + 0x351];
            }
            return g_leapNumber2[(year - 1) + 0x351];
        }

        public static string GetLlGZDay(DateInfo date)
        {
            int index = GetGanZhiFromDay(date.year, date.month, date.day, date.hour);
            if ((index >= 0) && (index < 60))
            {
                return g_ganZhi2[index];
            }
            if (date.month == 1)
            {
                date.year--;
                date.month = 13;
            }
            if (date.month == 2)
            {
                date.year--;
                date.month = 14;
            }
            string[] strArray = new string[] { "甲", "乙", "丙", "丁", "戊", "己", "庚", "辛", "壬", "癸" };
            string[] strArray2 = new string[] { "子", "丑", "寅", "卯", "辰", "巳", "午", "未", "申", "酉", "戌", "亥" };
            int num2 = 0;
            if (date.year > 100)
            {
                num2 = date.year / 100;
            }
            int num3 = date.year % 100;
            int num4 = ((date.month % 2) == 0) ? 6 : 0;
            int num5 = (((((((4 * num2) + (num2 / 4)) + (5 * num3)) + (num3 / 4)) + ((3 * (date.month + 1)) / 5)) + date.day) - 3) % 10;
            if (num5 == 0)
            {
                num5 = 10;
            }
            int num6 = ((((((((8 * num2) + (num2 / 4)) + (5 * num3)) + (num3 / 4)) + ((3 * (date.month + 1)) / 5)) + date.day) + 7) + num4) % 12;
            if (num6 == 0)
            {
                num6 = 12;
            }
            return (strArray[num5 - 1] + strArray2[num6 - 1]);
        }

        public static string GetLlGZMonth(DateInfo date)
        {
            DateInfo glDate = new DateInfo();
            int index = 0;
            glDate = GetGlDate(date);
            index = GetGanZhiFromMonth(glDate.year, glDate.month, glDate.day, glDate.hour);
            return g_ganZhi2[index];
        }

        public static bool GetLunarFromDay(int year, int month, int day, DateInfo date)
        {
            int eclipseType = 0;
            int moonPhase = 0;
            double theTime = 0.0;
            bool flag = false;
            date.year = year;
            if ((year >= -849) && (year <= 0x834))
            {
                date.day = (int) GetLunarMoon(year, month, day, ref eclipseType, ref moonPhase, ref theTime);
                date.month = (int) GetLunarMonth(year, month, day);
                date.isRunYue = date.month < 0;
                if (date.isRunYue)
                {
                    date.month = -date.month;
                }
                flag = true;
                if (month < date.month)
                {
                    date.year--;
                }
            }
            return flag;
        }

        public static LunarInfo GetLunarInfo(DateInfo date)
        {
            DateInfo glDate = new DateInfo();
            DateInfo info2 = new DateInfo();
            int nLYear = 0;
            glDate = GetGlDate(date);
            GetGanZhiFromYear(glDate.year, glDate.month, glDate.day, 0, ref nLYear);
            info2.year = nLYear;
            info2.month = date.month;
            info2.day = date.day;
            info2.isRunYue = date.isRunYue;
            LunarInfo info3 = new LunarInfo();
            string[] strArray = new string[] { "甲", "乙", "丙", "丁", "戊", "己", "庚", "辛", "壬", "癸" };
            string[] strArray2 = new string[] { "子", "丑", "寅", "卯", "辰", "巳", "午", "未", "申", "酉", "戌", "亥" };
            string[] strArray3 = new string[] { 
                "*", "初一", "初二", "初三", "初四", "初五", "初六", "初七", "初八", "初九", "初十", "十一", "十二", "十三", "十四", "十五", 
                "十六", "十七", "十八", "十九", "二十", "廿一", "廿二", "廿三", "廿四", "廿五", "廿六", "廿七", "廿八", "廿九", "三十"
             };
            string[] strArray4 = new string[] { "*", "正", "二", "三", "四", "五", "六", "七", "八", "九", "十", "十一", "腊" };
            int index = ((info2.year - 4) % 60) % 12;
            if ((index < 0) || (index >= 12))
            {
                return new LunarInfo();
            }
            info3.shuxiang = index;
            info3.shenxiao = cShuXiang[index];
            int num3 = ((info2.year - 4) % 60) % 10;
            if ((num3 < 0) || (num3 >= 10))
            {
                return new LunarInfo();
            }
            info3.tiangan = strArray[num3];
            int num4 = ((info2.year - 4) % 60) % 12;
            if ((num4 < 0) || (num4 >= 12))
            {
                return new LunarInfo();
            }
            info3.dizhi = strArray2[num4];
            if ((info2.month < 0) || (info2.month >= 13))
            {
                return new LunarInfo();
            }
            info3.isLeepMonth = info2.isRunYue;
            info3.monthname = strArray4[info2.month];
            if ((info2.day < 0) || (info2.day >= 0x1f))
            {
                return new LunarInfo();
            }
            info3.dayname = strArray3[info2.day];
            return info3;
        }

        public static LunarInfo GetLunarInfoByYanLi(DateInfo date)
        {
            return GetLunarInfo(Lunar(date));
        }

        public static LunarInfo GetLunarInfoByYanLi(DateTime date)
        {
            DateInfo info2 = new DateInfo {
                year = date.Year,
                month = date.Month,
                day = date.Day,
                hour = date.Hour,
                minute = date.Minute
            };
            DateInfo info = info2;
            return GetLunarInfo(Lunar(info));
        }

        public static LunarInfo GetLunarInfoByYanLiEx(DateInfo date)
        {
            DateInfo info = new DateInfo();
            info = Lunar(date);
            LunarInfo info2 = new LunarInfo();
            string[] strArray = new string[] { 
                "*", "初一", "初二", "初三", "初四", "初五", "初六", "初七", "初八", "初九", "初十", "十一", "十二", "十三", "十四", "十五", 
                "十六", "十七", "十八", "十九", "二十", "廿一", "廿二", "廿三", "廿四", "廿五", "廿六", "廿七", "廿八", "廿九", "三十"
             };
            string[] strArray2 = new string[] { "*", "正", "二", "三", "四", "五", "六", "七", "八", "九", "十", "十一", "腊" };
            if ((info.month < 0) || (info.month >= 13))
            {
                return new LunarInfo();
            }
            info2.isLeepMonth = info.isRunYue;
            info2.monthname = strArray2[info.month];
            if ((info.day < 0) || (info.day >= 0x1f))
            {
                return new LunarInfo();
            }
            info2.dayname = strArray[info.day];
            return info2;
        }

        public static double GetLunarMonth(int year, int month, int day)
        {
            int eclipseType = 0;
            int moonPhase = 0;
            double theTime = 0.0;
            double num = GetLunarMoon(year, month, day, ref eclipseType, ref moonPhase, ref theTime);
            if (theTime != -1.0)
            {
                num += theTime;
            }
            num = Math.Floor((double) (num - (Math.Floor((double) (num / 100.0)) * 100.0)));
            int leapNum = GetLeapNum(year);
            int num6 = ((int) ((((GetEquStandardDays(year, month, day) - GetEquStandardDays(-849, 1, 0x15)) - num) / 29.530588) + 0.5)) - leapNum;
            if (year <= 240)
            {
                num6++;
            }
            if (year <= 0xed)
            {
                num6--;
            }
            if (year < 0x18)
            {
                num6++;
            }
            if (year < 9)
            {
                num6--;
            }
            if (year <= -255)
            {
                num6++;
            }
            if (year <= -256)
            {
                num6 += 2;
            }
            if (year <= -722)
            {
                num6++;
            }
            double num7 = Convert.ToDouble((int) ((GetRemain((double) (num6 - 3), 12.0) + 1.0) + 0.5));
            if (((num7 == GetLeapMonth(year - 1)) && (month == 1)) && (day < num))
            {
                num7 = -num7;
            }
            else if (num7 == GetLeapMonth(year))
            {
                if ((month == 1) && (GetLeapMonth(year) != 12))
                {
                    num7++;
                }
                else
                {
                    num7 = -num7;
                }
            }
            else
            {
                if ((num7 < GetLeapMonth(year)) || ((month < num7) && (GetLeapMonth(year) > 0)))
                {
                    num7++;
                }
                num7 = Convert.ToDouble((int) ((GetRemain(num7 - 1.0, 12.0) + 1.0) + 0.5));
            }
            if (((year == 0x784) && (month == 3)) && (day == 5))
            {
                num7++;
            }
            if (((year == 0x7e2) && (month == 11)) && (day == 7))
            {
                num7--;
            }
            if (((year == 0x7e9) && (month == 4)) && (day == 0x1b))
            {
                num7++;
            }
            return num7;
        }

        public static double GetLunarMoon(int year, int month, int day, ref int eclipseType, ref int moonPhase, ref double theTime)
        {
            double num27 = 3.1415926535;
            double t = (year - 1899.5) / 100.0;
            int num19 = (int) ((year - 0x76c) * 12.3685);
            double num4 = 180.0 / num27;
            double num5 = 8.0;
            double num6 = (((GetAng((double) num19, t, 0.0, 0.75933, 0.0002172, 1.55E-07) + (0.53058868 * num19)) - (0.000837 * t)) + (num5 / 24.0)) + 0.5;
            double num7 = 0.1734 - (0.000393 * t);
            double num8 = 0xa955b + (0x1d * num19);
            double num9 = GetAng((double) num19, t, 0.08084821133, 359.2242 / num4, 3.33E-05 / num4, 3.47E-06 / num4);
            double num10 = GetAng((double) num19, t, 0.07171366128, 306.0253 / num4, -0.0107306 / num4, -1.236E-05 / num4);
            double num11 = GetAng((double) num19, t, 0.08519585128, 21.2964 / num4, 0.0016528 / num4, 2.39E-06 / num4);
            eclipseType = 0;
            int num20 = -1;
            double tail = 0.0;
            int num22 = 0;
            double num13 = 0.0;
            double num2 = -1.0;
            for (double i = -1.0; i <= 13.0; i += 0.5)
            {
                double a = num9 + (0.507984293 * i);
                double num15 = num10 + (6.73377553 * i);
                double num16 = num11 + (6.818486628 * i);
                double num17 = (((((((num6 + (1.53058868 * i)) + (num7 * Math.Sin(a))) - (0.4068 * Math.Sin(num15))) + (0.0021 * Math.Sin(2.0 * a))) + (0.0161 * Math.Sin(2.0 * num15))) + (0.0104 * Math.Sin(2.0 * num16))) - (0.0074 * Math.Sin(a - num15))) - (0.0051 * Math.Sin(a + num15));
                double x = (num8 + (28.0 * i)) + num17;
                int num21 = GetEquStandardDays(year, month, day) - ((int) x);
                if (((i == ((int) i)) && (num21 >= 0)) && (num21 <= 0x1d))
                {
                    num2 = i;
                    tail = GetTail(x);
                    num20 = num21 + 1;
                }
                if (i == (num2 + 0.5))
                {
                    num13 = GetTail(x);
                    num22 = (((int) x) - ((GetEquStandardDays(year, month, day) - num20) + 1)) + 1;
                }
                if ((((num20 == 1) && (i == num2)) || ((num20 == num22) && (i == (num2 + 0.5)))) && (Math.Abs(Math.Sin(num16)) <= 0.36))
                {
                    double num23 = ((((5.19595 - (0.0048 * Math.Cos(a))) + (0.002 * Math.Cos(2.0 * a))) - (0.3283 * Math.Cos(num15))) - (0.006 * Math.Cos(a + num15))) + (0.0041 * Math.Cos(a - num15));
                    double num24 = ((((((0.207 * Math.Sin(a)) + (0.0024 * Math.Sin(2.0 * a))) - (0.039 * Math.Sin(num15))) + (0.0115 * Math.Sin(2.0 * num15))) - (0.0073 * Math.Sin(a + num15))) - (0.0067 * Math.Sin(a - num15))) + (0.0117 * Math.Sin(2.0 * num16));
                    double num25 = Math.Abs((double) ((num23 * Math.Sin(num16)) + (num24 * Math.Cos(num16))));
                    double num26 = (((0.0059 + (0.0046 * Math.Cos(num16))) - (0.0182 * Math.Cos(num15))) + (0.0004 * Math.Cos(2.0 * num15))) - (0.0005 * Math.Cos(a + num15));
                    if ((num25 - num26) <= 1.5572)
                    {
                        eclipseType = 1;
                        if (i != ((int) i))
                        {
                            if ((num25 + num26) >= 1.0129)
                            {
                                eclipseType = 3;
                            }
                            else
                            {
                                eclipseType = 2;
                            }
                        }
                    }
                }
            }
            if ((year == 0x784) && (((month == 3) && (day >= 5)) || ((month == 4) && (day <= 3))))
            {
                num20++;
                if (num20 > 30)
                {
                    num20 -= 30;
                }
            }
            if ((year == 0x7e2) && (((month == 11) && (day >= 7)) || ((month == 12) && (day <= 6))))
            {
                num20--;
                if (num20 < 1)
                {
                    num20 += 30;
                }
            }
            if ((year == 0x7e9) && (((month == 4) && (day >= 7)) || ((month == 5) && (day <= 0x1a))))
            {
                num20++;
                if (num20 > 30)
                {
                    num20 -= 30;
                }
            }
            double num28 = num20;
            if (num20 == 1)
            {
                moonPhase = 1;
                theTime = tail;
                return num28;
            }
            if (num20 == num22)
            {
                moonPhase = 2;
                theTime = num13;
                return num28;
            }
            moonPhase = 0;
            theTime = -1.0;
            return num28;
        }

        public static int GetMonthDays(int year, int month)
        {
            int[] numArray = new int[] { 0x1f, 0x1c, 0x1f, 30, 0x1f, 30, 0x1f, 0x1f, 30, 0x1f, 30, 0x1f };
            if (GetIsLeapYear(year))
            {
                numArray[1]++;
            }
            return numArray[(month - 1) % 12];
        }

        public static double GetRemain(double X, double W)
        {
            return (GetTail(X / W) * W);
        }

        public static double GetTail(double x)
        {
            if (x > 0.0)
            {
                return (x - ((int) x));
            }
            return (x + ((int) x));
        }

        public static bool IsLeapYear(int year)
        {
            return ((((year % 4) == 0) && ((year % 100) != 0)) || ((year % 400) == 0));
        }

        public static long LDaysFrom1900(DateInfo date)
        {
            long num = ((((0x16d * date.year) + ((date.year - 1) / 4)) - ((date.year - 1) / 100)) + ((date.year - 1) / 400)) - 0xa96c8;
            for (int i = 0; i < (date.month - 1); i++)
            {
                num += solarMonth[i];
            }
            num += date.day;
            if (((((date.year % 4) == 0) && ((date.year % 100) != 0)) || ((date.year % 400) == 0)) && (date.month > 2))
            {
                num += 1L;
            }
            return num;
        }

        public static int LeapMonth(int y)
        {
            return GetLeapMonth(y);
        }

        public static DateInfo Lunar(DateInfo date)
        {
            DateInfo info = new DateInfo();
            if ((date.year < 0x76d) || (date.year > 0x801))
            {
                info.year = date.year;
                info.month = date.month;
                info.day = date.day;
                info.isRunYue = false;
                GetLunarFromDay(date.year, date.month, date.day, info);
            }
            else
            {
                info = LunarEx(date);
            }
            info.hour = date.hour;
            info.minute = date.minute;
            return info;
        }

        public static DateInfo Lunar(DateTime date)
        {
            DateInfo info2 = new DateInfo {
                year = date.Year,
                month = date.Month,
                day = date.Day,
                hour = date.Hour,
                minute = date.Minute
            };
            DateInfo info = info2;
            return Lunar(info);
        }

        public static DateInfo LunarEx(DateInfo glDate)
        {
            DateInfo info = new DateInfo();
            int num3 = 0;
            int num4 = 0;
            long num = LDaysFrom1900(glDate) - 30L;
            int y = 0x76c;
            while ((y < 0x802) && (num > 0L))
            {
                num4 = LYearDays(y);
                num -= num4;
                y++;
            }
            if (num < 0L)
            {
                num += num4;
                y--;
            }
            info.year = y;
            num3 = LeapMonth(y);
            bool flag = false;
            y = 1;
            while ((y < 13) && (num > 0L))
            {
                if (((num3 > 0) && (y == (num3 + 1))) && !flag)
                {
                    y--;
                    flag = true;
                    if (LeapMonth(info.year) != 0)
                    {
                        num4 = ((lunarInfo[info.year - 0x76c] & 0x10000) != 0) ? 30 : 0x1d;
                    }
                    else
                    {
                        num4 = 0;
                    }
                }
                else
                {
                    num4 = ((lunarInfo[info.year - 0x76c] & (((int) 0x10000) >> y)) != 0) ? 30 : 0x1d;
                }
                if (flag && (y == (num3 + 1)))
                {
                    flag = false;
                }
                num -= num4;
                y++;
            }
            if (num <= 0L)
            {
                num += num4;
                y--;
            }
            info.month = y;
            info.day = (int) num;
            info.isRunYue = flag;
            if (info.month == 0)
            {
                info.year--;
                info.month = 12;
                num = ((lunarInfo[info.year - 0x76c] & 0x10) != 0) ? ((long) 30) : ((long) 0x1d);
                info.day = (int) num;
            }
            return info;
        }

        public static int LYearDays(int y)
        {
            int num = 0x15c;
            int num2 = 0x15c;
            for (num = 0x8000; num > 8; num = num >> 1)
            {
                num2 += ((lunarInfo[y - 0x76c] & num) != 0) ? 1 : 0;
            }
            if ((lunarInfo[y - 0x76c] & 15) != 0)
            {
                return (num2 + (((lunarInfo[y - 0x76c] & 0x10000) != 0) ? 30 : 0x1d));
            }
            return num2;
        }
    }
}

